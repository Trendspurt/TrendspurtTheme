!function(e){var t={};function n(l){if(t[l])return t[l].exports;var c=t[l]={i:l,l:!1,exports:{}};return e[l].call(c.exports,c,c.exports,n),c.l=!0,c.exports}n.m=e,n.c=t,n.d=function(e,t,l){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:l})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var l=Object.create(null);if(n.r(l),Object.defineProperty(l,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var c in e)n.d(l,c,function(t){return e[t]}.bind(null,c));return l},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=12)}([function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _default; });\n/* harmony import */ var _libs_nanoevents__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(2);\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\n\nvar LOG = \'[ FxBase ]\';\nvar DEBUG = true;\n\nvar _default =\n/*#__PURE__*/\nfunction (_NanoEvents) {\n  _inherits(_default, _NanoEvents);\n\n  function _default(element, options) {\n    var _this;\n\n    _classCallCheck(this, _default);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_default).call(this));\n    _this.manifest = _this.constructor.manifest;\n    _this.element = element;\n    _this.options = options || {};\n    return _this;\n  }\n\n  _createClass(_default, [{\n    key: "init",\n    value: function init() {\n      this.options = Object.assign({}, this.manifest.options, this.options);\n      this.init();\n    }\n  }, {\n    key: "update",\n    value: function update() {}\n  }, {\n    key: "start",\n    value: function start() {}\n  }, {\n    key: "end",\n    value: function end() {}\n  }]);\n\n  return _default;\n}(_libs_nanoevents__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]);\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9tb2pvL2Z4L0Z4QmFzZS5qcz8wZDlmIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7IGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIikgeyBfdHlwZW9mID0gZnVuY3Rpb24gX3R5cGVvZihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZihvYmopOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoY2FsbCAmJiAoX3R5cGVvZihjYWxsKSA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSkgeyByZXR1cm4gY2FsbDsgfSByZXR1cm4gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKTsgfVxuXG5mdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHsgaWYgKHNlbGYgPT09IHZvaWQgMCkgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIHNlbGY7IH1cblxuZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHsgcmV0dXJuIG8uX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihvKTsgfTsgcmV0dXJuIF9nZXRQcm90b3R5cGVPZihvKTsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgX3NldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5mdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkgeyBfc2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gX3NldFByb3RvdHlwZU9mKG8sIHApIHsgby5fX3Byb3RvX18gPSBwOyByZXR1cm4gbzsgfTsgcmV0dXJuIF9zZXRQcm90b3R5cGVPZihvLCBwKTsgfVxuXG5pbXBvcnQgTmFub0V2ZW50cyBmcm9tICcuLi8uLi8uLi9saWJzL25hbm9ldmVudHMnO1xudmFyIExPRyA9ICdbIEZ4QmFzZSBdJztcbnZhciBERUJVRyA9IHRydWU7XG5cbnZhciBfZGVmYXVsdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoX05hbm9FdmVudHMpIHtcbiAgX2luaGVyaXRzKF9kZWZhdWx0LCBfTmFub0V2ZW50cyk7XG5cbiAgZnVuY3Rpb24gX2RlZmF1bHQoZWxlbWVudCwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpcztcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfZGVmYXVsdCk7XG5cbiAgICBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9nZXRQcm90b3R5cGVPZihfZGVmYXVsdCkuY2FsbCh0aGlzKSk7XG4gICAgX3RoaXMubWFuaWZlc3QgPSBfdGhpcy5jb25zdHJ1Y3Rvci5tYW5pZmVzdDtcbiAgICBfdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICByZXR1cm4gX3RoaXM7XG4gIH1cblxuICBfY3JlYXRlQ2xhc3MoX2RlZmF1bHQsIFt7XG4gICAga2V5OiBcImluaXRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gaW5pdCgpIHtcbiAgICAgIHRoaXMub3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMubWFuaWZlc3Qub3B0aW9ucywgdGhpcy5vcHRpb25zKTtcbiAgICAgIHRoaXMuaW5pdCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJ1cGRhdGVcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gdXBkYXRlKCkge31cbiAgfSwge1xuICAgIGtleTogXCJzdGFydFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzdGFydCgpIHt9XG4gIH0sIHtcbiAgICBrZXk6IFwiZW5kXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGVuZCgpIHt9XG4gIH1dKTtcblxuICByZXR1cm4gX2RlZmF1bHQ7XG59KE5hbm9FdmVudHMpO1xuXG5leHBvcnQgeyBfZGVmYXVsdCBhcyBkZWZhdWx0IH07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUFBO0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///0\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  SCENE_PLUGINS_READY: 'SCENE_PLUGINS_READY',\n  SCENE_PRE_READY: 'SCENE_PRE_READY',\n  SCENE_READY: 'SCENE_READY'\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3NyYy9mdXNpb24vQ29uc3QuanM/YTE5NCJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZGVmYXVsdCB7XG4gIFNDRU5FX1BMVUdJTlNfUkVBRFk6ICdTQ0VORV9QTFVHSU5TX1JFQURZJyxcbiAgU0NFTkVfUFJFX1JFQURZOiAnU0NFTkVfUFJFX1JFQURZJyxcbiAgU0NFTkVfUkVBRFk6ICdTQ0VORV9SRUFEWSdcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _default; });\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\n * Nano Events\n * Taken from https://github.com/ai/nanoevents (MIT license)\n */\nvar _default =\n/*#__PURE__*/\nfunction () {\n  function _default() {\n    _classCallCheck(this, _default);\n\n    _defineProperty(this, "events", {});\n  }\n  /**\n   * Calls each of the listeners registered for a given event.\n   *\n   * @param {string} event The event name.\n   * @param {...*} arguments The arguments for listeners.\n   *\n   * @return {undefined}\n   *\n   * @example\n   * ee.emit(\'tick\', tickType, tickDuration)\n   *\n   * @alias NanoEvents#emit\n   * @method\n   */\n\n\n  _createClass(_default, [{\n    key: "emit",\n    value: function emit(event) {\n      var args = [].slice.call(arguments, 1) // Array.prototype.call() returns empty array if context is not array-like\n      ;\n      [].slice.call(this.events[event] || []).filter(function (i) {\n        i.apply(null, args);\n      });\n    }\n    /**\n     * Add a listener for a given event.\n     *\n     * @param {string} event The event name.\n     * @param {function} cb The listener function.\n     *\n     * @return {function} Unbind listener from event.\n     *\n     * @example\n     * const unbind = ee.on(\'tick\', (tickType, tickDuration) => {\n     *   count += 1\n     * })\n     *\n     * disable () {\n     *   unbind()\n     * }\n     *\n     * @alias NanoEvents#on\n     * @method\n     */\n\n  }, {\n    key: "on",\n    value: function on(event, cb) {\n      if (false) {}\n\n      (this.events[event] = this.events[event] || []).push(cb);\n      return function () {\n        this.events[event] = this.events[event].filter(function (i) {\n          return i !== cb;\n        });\n      }.bind(this);\n    }\n    /**\n     * Removes all listeners.\n     *\n     * @returns {undefined}\n     *\n     * @example\n     * unbindAll(emitter)\n     */\n\n  }, {\n    key: "unbindAll",\n    value: function unbindAll() {\n      this.events = {};\n    }\n  }]);\n\n  return _default;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL2xpYnMvbmFub2V2ZW50cy5qcz9kYTNiIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH1cblxuZnVuY3Rpb24gX2NyZWF0ZUNsYXNzKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvciwgc3RhdGljUHJvcHMpOyByZXR1cm4gQ29uc3RydWN0b3I7IH1cblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuLyoqXG4gKiBOYW5vIEV2ZW50c1xuICogVGFrZW4gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vYWkvbmFub2V2ZW50cyAoTUlUIGxpY2Vuc2UpXG4gKi9cbnZhciBfZGVmYXVsdCA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfZGVmYXVsdCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJldmVudHNcIiwge30pO1xuICB9XG4gIC8qKlxuICAgKiBDYWxscyBlYWNoIG9mIHRoZSBsaXN0ZW5lcnMgcmVnaXN0ZXJlZCBmb3IgYSBnaXZlbiBldmVudC5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICAgKiBAcGFyYW0gey4uLip9IGFyZ3VtZW50cyBUaGUgYXJndW1lbnRzIGZvciBsaXN0ZW5lcnMuXG4gICAqXG4gICAqIEByZXR1cm4ge3VuZGVmaW5lZH1cbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogZWUuZW1pdCgndGljaycsIHRpY2tUeXBlLCB0aWNrRHVyYXRpb24pXG4gICAqXG4gICAqIEBhbGlhcyBOYW5vRXZlbnRzI2VtaXRcbiAgICogQG1ldGhvZFxuICAgKi9cblxuXG4gIF9jcmVhdGVDbGFzcyhfZGVmYXVsdCwgW3tcbiAgICBrZXk6IFwiZW1pdFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBlbWl0KGV2ZW50KSB7XG4gICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAxKSAvLyBBcnJheS5wcm90b3R5cGUuY2FsbCgpIHJldHVybnMgZW1wdHkgYXJyYXkgaWYgY29udGV4dCBpcyBub3QgYXJyYXktbGlrZVxuICAgICAgO1xuICAgICAgW10uc2xpY2UuY2FsbCh0aGlzLmV2ZW50c1tldmVudF0gfHwgW10pLmZpbHRlcihmdW5jdGlvbiAoaSkge1xuICAgICAgICBpLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZCBhIGxpc3RlbmVyIGZvciBhIGdpdmVuIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IGV2ZW50IFRoZSBldmVudCBuYW1lLlxuICAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IGNiIFRoZSBsaXN0ZW5lciBmdW5jdGlvbi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4ge2Z1bmN0aW9ufSBVbmJpbmQgbGlzdGVuZXIgZnJvbSBldmVudC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogY29uc3QgdW5iaW5kID0gZWUub24oJ3RpY2snLCAodGlja1R5cGUsIHRpY2tEdXJhdGlvbikgPT4ge1xuICAgICAqICAgY291bnQgKz0gMVxuICAgICAqIH0pXG4gICAgICpcbiAgICAgKiBkaXNhYmxlICgpIHtcbiAgICAgKiAgIHVuYmluZCgpXG4gICAgICogfVxuICAgICAqXG4gICAgICogQGFsaWFzIE5hbm9FdmVudHMjb25cbiAgICAgKiBAbWV0aG9kXG4gICAgICovXG5cbiAgfSwge1xuICAgIGtleTogXCJvblwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBvbihldmVudCwgY2IpIHtcbiAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmIHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0xpc3RlbmVyIG11c3QgYmUgYSBmdW5jdGlvbicpO1xuICAgICAgfVxuXG4gICAgICAodGhpcy5ldmVudHNbZXZlbnRdID0gdGhpcy5ldmVudHNbZXZlbnRdIHx8IFtdKS5wdXNoKGNiKTtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZXZlbnRzW2V2ZW50XSA9IHRoaXMuZXZlbnRzW2V2ZW50XS5maWx0ZXIoZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICByZXR1cm4gaSAhPT0gY2I7XG4gICAgICAgIH0pO1xuICAgICAgfS5iaW5kKHRoaXMpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIGFsbCBsaXN0ZW5lcnMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7dW5kZWZpbmVkfVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB1bmJpbmRBbGwoZW1pdHRlcilcbiAgICAgKi9cblxuICB9LCB7XG4gICAga2V5OiBcInVuYmluZEFsbFwiLFxuICAgIHZhbHVlOiBmdW5jdGlvbiB1bmJpbmRBbGwoKSB7XG4gICAgICB0aGlzLmV2ZW50cyA9IHt9O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBfZGVmYXVsdDtcbn0oKTtcblxuZXhwb3J0IHsgX2RlZmF1bHQgYXMgZGVmYXVsdCB9OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///2\n')},function(module,exports,__webpack_require__){eval("var content = __webpack_require__(4);\n\nif (typeof content === 'string') {\n  content = [[module.i, content, '']];\n}\n\nvar options = {}\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = __webpack_require__(6)(content, options);\n\nif (content.locals) {\n  module.exports = content.locals;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3N0eWxlL2Z1c2lvbi5zY3NzPzhiZWEiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvZGlzdC9janMuanMhLi9mdXNpb24uc2Nzc1wiKTtcblxuaWYgKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykge1xuICBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG59XG5cbnZhciBvcHRpb25zID0ge31cblxub3B0aW9ucy5pbnNlcnQgPSBcImhlYWRcIjtcbm9wdGlvbnMuc2luZ2xldG9uID0gZmFsc2U7XG5cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiKShjb250ZW50LCBvcHRpb25zKTtcblxuaWYgKGNvbnRlbnQubG9jYWxzKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG59XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///3\n")},function(module,exports,__webpack_require__){eval('exports = module.exports = __webpack_require__(5)(false);\n// Module\nexports.push([module.i, ".fusion--player{display:flex;justify-content:center}.fusion--player .fusion--viewport{position:relative;width:100%;height:100%}.fusion--player .fusion--viewport .fusion--scene{position:absolute;top:0;right:0;bottom:0;left:0;overflow-x:hidden;overflow-y:hidden;visibility:hidden;opacity:0}.fusion--player .fusion--viewport .fusion--scene.visible{visibility:visible;opacity:1}.fusion--player .fusion--viewport .fusion--scene.fusion--scene--iframe iframe.fusion--iframe{overflow:hidden;border:none}.fusion--player .fusion--viewport .fusion--scene .fusion--scene--content{position:absolute;top:0;right:0;bottom:0;left:0;transform-origin:top left;overflow:hidden}.fusion--player .fusion--viewport .fusion--scene .fusion--scene--content>*{position:absolute;width:100%;height:100%}.fusion--player .fusion--viewport .fusion--scene .fusion--scene--content>*>*{position:absolute;top:0;left:0}.fusion--player .fusion--viewport .fusion--scene--debugger--guidesWrapper{position:absolute;top:0;right:0;bottom:0;left:0;z-index:9999999;pointer-events:none}.fusion--player .fusion--viewport .fusion--scene--debugger--guidesWrapper .guide-horizontal-center{position:absolute;top:0;bottom:0;left:50%;width:1px;z-index:99999;border-left:1px dashed rgba(0,0,0,0.8)}.fusion--player .fusion--viewport .fusion--scene--debugger--guidesWrapper .guide-sceneBounds{position:absolute;top:0;right:0;bottom:0;left:0;transform-origin:top left;background-color:rgba(108,159,255,0.3)}\\n", ""]);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL3N0eWxlL2Z1c2lvbi5zY3NzPzk4MWQiXSwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanNcIikoZmFsc2UpO1xuLy8gTW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIuZnVzaW9uLS1wbGF5ZXJ7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpjZW50ZXJ9LmZ1c2lvbi0tcGxheWVyIC5mdXNpb24tLXZpZXdwb3J0e3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9LmZ1c2lvbi0tcGxheWVyIC5mdXNpb24tLXZpZXdwb3J0IC5mdXNpb24tLXNjZW5le3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO292ZXJmbG93LXg6aGlkZGVuO292ZXJmbG93LXk6aGlkZGVuO3Zpc2liaWxpdHk6aGlkZGVuO29wYWNpdHk6MH0uZnVzaW9uLS1wbGF5ZXIgLmZ1c2lvbi0tdmlld3BvcnQgLmZ1c2lvbi0tc2NlbmUudmlzaWJsZXt2aXNpYmlsaXR5OnZpc2libGU7b3BhY2l0eToxfS5mdXNpb24tLXBsYXllciAuZnVzaW9uLS12aWV3cG9ydCAuZnVzaW9uLS1zY2VuZS5mdXNpb24tLXNjZW5lLS1pZnJhbWUgaWZyYW1lLmZ1c2lvbi0taWZyYW1le292ZXJmbG93OmhpZGRlbjtib3JkZXI6bm9uZX0uZnVzaW9uLS1wbGF5ZXIgLmZ1c2lvbi0tdmlld3BvcnQgLmZ1c2lvbi0tc2NlbmUgLmZ1c2lvbi0tc2NlbmUtLWNvbnRlbnR7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7cmlnaHQ6MDtib3R0b206MDtsZWZ0OjA7dHJhbnNmb3JtLW9yaWdpbjp0b3AgbGVmdDtvdmVyZmxvdzpoaWRkZW59LmZ1c2lvbi0tcGxheWVyIC5mdXNpb24tLXZpZXdwb3J0IC5mdXNpb24tLXNjZW5lIC5mdXNpb24tLXNjZW5lLS1jb250ZW50Pip7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0uZnVzaW9uLS1wbGF5ZXIgLmZ1c2lvbi0tdmlld3BvcnQgLmZ1c2lvbi0tc2NlbmUgLmZ1c2lvbi0tc2NlbmUtLWNvbnRlbnQ+Kj4qe3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MH0uZnVzaW9uLS1wbGF5ZXIgLmZ1c2lvbi0tdmlld3BvcnQgLmZ1c2lvbi0tc2NlbmUtLWRlYnVnZ2VyLS1ndWlkZXNXcmFwcGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO3otaW5kZXg6OTk5OTk5OTtwb2ludGVyLWV2ZW50czpub25lfS5mdXNpb24tLXBsYXllciAuZnVzaW9uLS12aWV3cG9ydCAuZnVzaW9uLS1zY2VuZS0tZGVidWdnZXItLWd1aWRlc1dyYXBwZXIgLmd1aWRlLWhvcml6b250YWwtY2VudGVye3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2JvdHRvbTowO2xlZnQ6NTAlO3dpZHRoOjFweDt6LWluZGV4Ojk5OTk5O2JvcmRlci1sZWZ0OjFweCBkYXNoZWQgcmdiYSgwLDAsMCwwLjgpfS5mdXNpb24tLXBsYXllciAuZnVzaW9uLS12aWV3cG9ydCAuZnVzaW9uLS1zY2VuZS0tZGVidWdnZXItLWd1aWRlc1dyYXBwZXIgLmd1aWRlLXNjZW5lQm91bmRze3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO3JpZ2h0OjA7Ym90dG9tOjA7bGVmdDowO3RyYW5zZm9ybS1vcmlnaW46dG9wIGxlZnQ7YmFja2dyb3VuZC1jb2xvcjpyZ2JhKDEwOCwxNTksMjU1LDAuMyl9XFxuXCIsIFwiXCJdKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n')},function(module,exports,__webpack_require__){"use strict";eval('\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return "@media ".concat(item[2], "{").concat(content, "}");\n      }\n\n      return content;\n    }).join(\'\');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery) {\n    if (typeof modules === \'string\') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \'\']];\n    }\n\n    var alreadyImportedModules = {};\n\n    for (var i = 0; i < this.length; i++) {\n      // eslint-disable-next-line prefer-destructuring\n      var id = this[i][0];\n\n      if (id != null) {\n        alreadyImportedModules[id] = true;\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = modules[_i]; // skip already imported module\n      // this implementation is not 100% perfect for weird media query combinations\n      // when a module is imported multiple times with different media queries.\n      // I hope this will never occur (Hey this way we have smaller bundles)\n\n      if (item[0] == null || !alreadyImportedModules[item[0]]) {\n        if (mediaQuery && !item[2]) {\n          item[2] = mediaQuery;\n        } else if (mediaQuery) {\n          item[2] = "(".concat(item[2], ") and (").concat(mediaQuery, ")");\n        }\n\n        list.push(item);\n      }\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || \'\'; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === \'function\') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return "/*# sourceURL=".concat(cssMapping.sourceRoot).concat(source, " */");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join(\'\\n\');\n  }\n\n  return [content].join(\'\\n\');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = "sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(base64);\n  return "/*# ".concat(data, " */");\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNS5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanM/MjRmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIntcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgJyddXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gbW9kdWxlc1tfaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiKFwiLmNvbmNhdChpdGVtWzJdLCBcIikgYW5kIChcIikuY29uY2F0KG1lZGlhUXVlcnksIFwiKVwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59O1xuXG5mdW5jdGlvbiBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0sIHVzZVNvdXJjZU1hcCkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV0gfHwgJyc7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuXG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh1c2VTb3VyY2VNYXAgJiYgdHlwZW9mIGJ0b2EgPT09ICdmdW5jdGlvbicpIHtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IHRvQ29tbWVudChjc3NNYXBwaW5nKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290KS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKCdcXG4nKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbignXFxuJyk7XG59IC8vIEFkYXB0ZWQgZnJvbSBjb252ZXJ0LXNvdXJjZS1tYXAgKE1JVClcblxuXG5mdW5jdGlvbiB0b0NvbW1lbnQoc291cmNlTWFwKSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKTtcbiAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICByZXR1cm4gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xufSJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){"use strict";eval("\n\nvar stylesInDom = {};\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nfunction listToStyles(list, options) {\n  var styles = [];\n  var newStyles = {};\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var css = item[1];\n    var media = item[2];\n    var sourceMap = item[3];\n    var part = {\n      css: css,\n      media: media,\n      sourceMap: sourceMap\n    };\n\n    if (!newStyles[id]) {\n      styles.push(newStyles[id] = {\n        id: id,\n        parts: [part]\n      });\n    } else {\n      newStyles[id].parts.push(part);\n    }\n  }\n\n  return styles;\n}\n\nfunction addStylesToDom(styles, options) {\n  for (var i = 0; i < styles.length; i++) {\n    var item = styles[i];\n    var domStyle = stylesInDom[item.id];\n    var j = 0;\n\n    if (domStyle) {\n      domStyle.refs++;\n\n      for (; j < domStyle.parts.length; j++) {\n        domStyle.parts[j](item.parts[j]);\n      }\n\n      for (; j < item.parts.length; j++) {\n        domStyle.parts.push(addStyle(item.parts[j], options));\n      }\n    } else {\n      var parts = [];\n\n      for (; j < item.parts.length; j++) {\n        parts.push(addStyle(item.parts[j], options));\n      }\n\n      stylesInDom[item.id] = {\n        id: item.id,\n        refs: 1,\n        parts: parts\n      };\n    }\n  }\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n\n  if (typeof options.attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : undefined;\n\n    if (nonce) {\n      options.attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(options.attributes).forEach(function (key) {\n    style.setAttribute(key, options.attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {};\n  options.attributes = typeof options.attributes === 'object' ? options.attributes : {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  var styles = listToStyles(list, options);\n  addStylesToDom(styles, options);\n  return function update(newList) {\n    var mayRemove = [];\n\n    for (var i = 0; i < styles.length; i++) {\n      var item = styles[i];\n      var domStyle = stylesInDom[item.id];\n\n      if (domStyle) {\n        domStyle.refs--;\n        mayRemove.push(domStyle);\n      }\n    }\n\n    if (newList) {\n      var newStyles = listToStyles(newList, options);\n      addStylesToDom(newStyles, options);\n    }\n\n    for (var _i = 0; _i < mayRemove.length; _i++) {\n      var _domStyle = mayRemove[_i];\n\n      if (_domStyle.refs === 0) {\n        for (var j = 0; j < _domStyle.parts.length; j++) {\n          _domStyle.parts[j]();\n        }\n\n        delete stylesInDom[_domStyle.id];\n      }\n    }\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNi5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcz8yZGJhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG52YXIgc3R5bGVzSW5Eb20gPSB7fTtcblxudmFyIGlzT2xkSUUgPSBmdW5jdGlvbiBpc09sZElFKCkge1xuICB2YXIgbWVtbztcbiAgcmV0dXJuIGZ1bmN0aW9uIG1lbW9yaXplKCkge1xuICAgIGlmICh0eXBlb2YgbWVtbyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIC8vIFRlc3QgZm9yIElFIDw9IDkgYXMgcHJvcG9zZWQgYnkgQnJvd3NlcmhhY2tzXG4gICAgICAvLyBAc2VlIGh0dHA6Ly9icm93c2VyaGFja3MuY29tLyNoYWNrLWU3MWQ4NjkyZjY1MzM0MTczZmVlNzE1YzIyMmNiODA1XG4gICAgICAvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG4gICAgICAvLyB0byBvcGVyYXRlIGNvcnJlY3RseSBpbnRvIG5vbi1zdGFuZGFyZCBlbnZpcm9ubWVudHNcbiAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3dlYnBhY2stY29udHJpYi9zdHlsZS1sb2FkZXIvaXNzdWVzLzE3N1xuICAgICAgbWVtbyA9IEJvb2xlYW4od2luZG93ICYmIGRvY3VtZW50ICYmIGRvY3VtZW50LmFsbCAmJiAhd2luZG93LmF0b2IpO1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0VGFyZ2V0ID0gZnVuY3Rpb24gZ2V0VGFyZ2V0KCkge1xuICB2YXIgbWVtbyA9IHt9O1xuICByZXR1cm4gZnVuY3Rpb24gbWVtb3JpemUodGFyZ2V0KSB7XG4gICAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBtZW1vW3RhcmdldF07XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZXMgPSBbXTtcbiAgdmFyIG5ld1N0eWxlcyA9IHt9O1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY3NzID0gaXRlbVsxXTtcbiAgICB2YXIgbWVkaWEgPSBpdGVtWzJdO1xuICAgIHZhciBzb3VyY2VNYXAgPSBpdGVtWzNdO1xuICAgIHZhciBwYXJ0ID0ge1xuICAgICAgY3NzOiBjc3MsXG4gICAgICBtZWRpYTogbWVkaWEsXG4gICAgICBzb3VyY2VNYXA6IHNvdXJjZU1hcFxuICAgIH07XG5cbiAgICBpZiAoIW5ld1N0eWxlc1tpZF0pIHtcbiAgICAgIHN0eWxlcy5wdXNoKG5ld1N0eWxlc1tpZF0gPSB7XG4gICAgICAgIGlkOiBpZCxcbiAgICAgICAgcGFydHM6IFtwYXJ0XVxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gc3R5bGVzO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXTtcbiAgICB2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcbiAgICB2YXIgaiA9IDA7XG5cbiAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgIGRvbVN0eWxlLnJlZnMrKztcblxuICAgICAgZm9yICg7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuICAgICAgICBkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcbiAgICAgIH1cblxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGRvbVN0eWxlLnBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcGFydHMgPSBbXTtcblxuICAgICAgZm9yICg7IGogPCBpdGVtLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIHBhcnRzLnB1c2goYWRkU3R5bGUoaXRlbS5wYXJ0c1tqXSwgb3B0aW9ucykpO1xuICAgICAgfVxuXG4gICAgICBzdHlsZXNJbkRvbVtpdGVtLmlkXSA9IHtcbiAgICAgICAgaWQ6IGl0ZW0uaWQsXG4gICAgICAgIHJlZnM6IDEsXG4gICAgICAgIHBhcnRzOiBwYXJ0c1xuICAgICAgfTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblxuICBpZiAodHlwZW9mIG9wdGlvbnMuYXR0cmlidXRlcy5ub25jZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09ICd1bmRlZmluZWQnID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gICAgaWYgKG5vbmNlKSB7XG4gICAgICBvcHRpb25zLmF0dHJpYnV0ZXMubm9uY2UgPSBub25jZTtcbiAgICB9XG4gIH1cblxuICBPYmplY3Qua2V5cyhvcHRpb25zLmF0dHJpYnV0ZXMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHN0eWxlLnNldEF0dHJpYnV0ZShrZXksIG9wdGlvbnMuYXR0cmlidXRlc1trZXldKTtcbiAgfSk7XG5cbiAgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIG9wdGlvbnMuaW5zZXJ0KHN0eWxlKTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KG9wdGlvbnMuaW5zZXJ0IHx8ICdoZWFkJyk7XG5cbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgICB9XG5cbiAgICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICB9XG5cbiAgcmV0dXJuIHN0eWxlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG52YXIgcmVwbGFjZVRleHQgPSBmdW5jdGlvbiByZXBsYWNlVGV4dCgpIHtcbiAgdmFyIHRleHRTdG9yZSA9IFtdO1xuICByZXR1cm4gZnVuY3Rpb24gcmVwbGFjZShpbmRleCwgcmVwbGFjZW1lbnQpIHtcbiAgICB0ZXh0U3RvcmVbaW5kZXhdID0gcmVwbGFjZW1lbnQ7XG4gICAgcmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG4gIH07XG59KCk7XG5cbmZ1bmN0aW9uIGFwcGx5VG9TaW5nbGV0b25UYWcoc3R5bGUsIGluZGV4LCByZW1vdmUsIG9iaikge1xuICB2YXIgY3NzID0gcmVtb3ZlID8gJycgOiBvYmouY3NzOyAvLyBGb3Igb2xkIElFXG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICAqL1xuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gcmVwbGFjZVRleHQoaW5kZXgsIGNzcyk7XG4gIH0gZWxzZSB7XG4gICAgdmFyIGNzc05vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpO1xuICAgIHZhciBjaGlsZE5vZGVzID0gc3R5bGUuY2hpbGROb2RlcztcblxuICAgIGlmIChjaGlsZE5vZGVzW2luZGV4XSkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoY2hpbGROb2Rlc1tpbmRleF0pO1xuICAgIH1cblxuICAgIGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuICAgICAgc3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgbWVkaWEpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiBidG9hKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG52YXIgc2luZ2xldG9uID0gbnVsbDtcbnZhciBzaW5nbGV0b25Db3VudGVyID0gMDtcblxuZnVuY3Rpb24gYWRkU3R5bGUob2JqLCBvcHRpb25zKSB7XG4gIHZhciBzdHlsZTtcbiAgdmFyIHVwZGF0ZTtcbiAgdmFyIHJlbW92ZTtcblxuICBpZiAob3B0aW9ucy5zaW5nbGV0b24pIHtcbiAgICB2YXIgc3R5bGVJbmRleCA9IHNpbmdsZXRvbkNvdW50ZXIrKztcbiAgICBzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcbiAgICB1cGRhdGUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIGZhbHNlKTtcbiAgICByZW1vdmUgPSBhcHBseVRvU2luZ2xldG9uVGFnLmJpbmQobnVsbCwgc3R5bGUsIHN0eWxlSW5kZXgsIHRydWUpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlID0gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICAgIHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cbiAgICByZW1vdmUgPSBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH07XG4gIH1cblxuICB1cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICB1cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmF0dHJpYnV0ZXMgPSB0eXBlb2Ygb3B0aW9ucy5hdHRyaWJ1dGVzID09PSAnb2JqZWN0JyA/IG9wdGlvbnMuYXR0cmlidXRlcyA6IHt9OyAvLyBGb3JjZSBzaW5nbGUtdGFnIHNvbHV0aW9uIG9uIElFNi05LCB3aGljaCBoYXMgYSBoYXJkIGxpbWl0IG9uIHRoZSAjIG9mIDxzdHlsZT5cbiAgLy8gdGFncyBpdCB3aWxsIGFsbG93IG9uIGEgcGFnZVxuXG4gIGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSAnYm9vbGVhbicpIHtcbiAgICBvcHRpb25zLnNpbmdsZXRvbiA9IGlzT2xkSUUoKTtcbiAgfVxuXG4gIHZhciBzdHlsZXMgPSBsaXN0VG9TdHlsZXMobGlzdCwgb3B0aW9ucyk7XG4gIGFkZFN0eWxlc1RvRG9tKHN0eWxlcywgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIHZhciBtYXlSZW1vdmUgPSBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IHN0eWxlc1tpXTtcbiAgICAgIHZhciBkb21TdHlsZSA9IHN0eWxlc0luRG9tW2l0ZW0uaWRdO1xuXG4gICAgICBpZiAoZG9tU3R5bGUpIHtcbiAgICAgICAgZG9tU3R5bGUucmVmcy0tO1xuICAgICAgICBtYXlSZW1vdmUucHVzaChkb21TdHlsZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKG5ld0xpc3QpIHtcbiAgICAgIHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG4gICAgICBhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtYXlSZW1vdmUubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2RvbVN0eWxlID0gbWF5UmVtb3ZlW19pXTtcblxuICAgICAgaWYgKF9kb21TdHlsZS5yZWZzID09PSAwKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgX2RvbVN0eWxlLnBhcnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgX2RvbVN0eWxlLnBhcnRzW2pdKCk7XG4gICAgICAgIH1cblxuICAgICAgICBkZWxldGUgc3R5bGVzSW5Eb21bX2RvbVN0eWxlLmlkXTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///6\n")},function(module){eval('module.exports = JSON.parse("{\\"name\\":\\"mojo\\",\\"version\\":\\"0.9.0\\",\\"description\\":\\"\\",\\"private\\":true,\\"scripts\\":{\\"build\\":\\"npx webpack --mode production\\",\\"serve\\":\\"http-server -g -c-1\\"},\\"author\\":\\"Simon Widjaja\\",\\"devDependencies\\":{\\"@babel/cli\\":\\"^7.7.0\\",\\"@babel/core\\":\\"^7.7.2\\",\\"@babel/node\\":\\"^7.7.0\\",\\"@babel/plugin-proposal-class-properties\\":\\"^7.7.0\\",\\"@babel/preset-env\\":\\"^7.7.1\\",\\"@babel/register\\":\\"^7.7.0\\",\\"babel-register\\":\\"^6.26.0\\",\\"webpack\\":\\"^4.41.2\\",\\"webpack-cli\\":\\"^3.3.11\\",\\"webpack-dev-server\\":\\"^3.9.0\\"},\\"dependencies\\":{\\"@babel/plugin-transform-async-to-generator\\":\\"^7.7.0\\",\\"babel-loader\\":\\"^8.0.6\\",\\"core-js\\":\\"^3.4.0\\",\\"css-loader\\":\\"^3.2.0\\",\\"fs-extra\\":\\"^9.0.1\\",\\"lodash.debounce\\":\\"^4.0.8\\",\\"lodash.throttle\\":\\"^4.1.1\\",\\"node-sass\\":\\"^4.13.1\\",\\"regenerator-runtime\\":\\"^0.13.3\\",\\"sass-loader\\":\\"^8.0.0\\",\\"style-loader\\":\\"^1.0.0\\"}}");//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNy5qcyIsInNvdXJjZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///7\n')},function(module,exports){eval('var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function("return this")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === "object") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it\'s\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanM/Y2QwMCJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n')},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Creates a throttled function that only invokes `func` at most once per\n * every `wait` milliseconds. The throttled function comes with a `cancel`\n * method to cancel delayed `func` invocations and a `flush` method to\n * immediately invoke them. Provide `options` to indicate whether `func`\n * should be invoked on the leading and/or trailing edge of the `wait`\n * timeout. The `func` is invoked with the last arguments provided to the\n * throttled function. Subsequent calls to the throttled function return the\n * result of the last `func` invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the throttled function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.throttle` and `_.debounce`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to throttle.\n * @param {number} [wait=0] The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=true]\n *  Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n * @example\n *\n * // Avoid excessively updating the position while scrolling.\n * jQuery(window).on('scroll', _.throttle(updatePosition, 100));\n *\n * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.\n * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });\n * jQuery(element).on('click', throttled);\n *\n * // Cancel the trailing throttled invocation.\n * jQuery(window).on('popstate', throttled.cancel);\n */\nfunction throttle(func, wait, options) {\n  var leading = true,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  if (isObject(options)) {\n    leading = 'leading' in options ? !!options.leading : leading;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n  return debounce(func, wait, {\n    'leading': leading,\n    'maxWait': wait,\n    'trailing': trailing\n  });\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = throttle;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///9\n")},function(module,exports,__webpack_require__){eval("/* WEBPACK VAR INJECTION */(function(global) {/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n\n/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(8)))//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///10\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return _default; });\n/* harmony import */ var _FxBase__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\n// SCAN FOR FX\n\nvar LOG = \'[ FxScanner ]\';\nvar DEBUG = true;\n\nvar _default =\n/*#__PURE__*/\nfunction () {\n  function _default() {\n    _classCallCheck(this, _default);\n  }\n\n  _createClass(_default, null, [{\n    key: "scan",\n    value: function scan(context) {\n      if (context instanceof Element) {\n        this._scanElement(context);\n      }\n    }\n  }, {\n    key: "_scanElement",\n    value: function _scanElement(element) {\n      var _this = this;\n\n      Object.keys(mojo.fx).forEach(function (item) {\n        if (mojo.fx[item].prototype instanceof _FxBase__WEBPACK_IMPORTED_MODULE_0__[/* default */ "a"]) {\n          _this._processFx(element, item);\n        }\n      });\n    }\n  }, {\n    key: "_processFx",\n    value: function _processFx(element, fx) {\n      var attr = "mojo-fx-".concat(mojo.fx[fx].manifest.id);\n      var elements = element.querySelectorAll("[".concat(attr, "]"));\n\n      for (var i = 0; i < elements.length; i++) {\n        var _element = elements[i];\n        if (_element.mojo && _element.mojo.scanned[fx]) continue;\n        var options = this.extractOptions(_element.getAttribute(attr));\n        var trigger = options.trigger || mojo.fx[fx].manifest.options.trigger || \'click\';\n        DEBUG && console.log(LOG, \'_processFx()\', "fx: ".concat(fx));\n        mojo.add(_element, trigger, mojo.fx[fx], options);\n        mojo.prepareElement(_element); // element.mojo.scanned = true;\n\n        _element.mojo.scanned[fx] = true;\n      }\n    }\n  }, {\n    key: "extractOptions",\n    value: function extractOptions(raw) {\n      if (!raw) return {}; // Eval solution\n\n      return eval("(function() { return ".concat(raw, "})()")); // Primitive version (only support flat non-nested values, no arrays , no objects)\n      // raw = raw.replace(/{(.*)}/, \'$1\');\n      // let args = raw.split(\',\').map( (item) => item.trim().split(\':\') );\n      // let result = {};\n      // args.forEach(item => { \n      //   let val = item[1].trim();\n      //   if (!isNaN(val)) { val = +val; }\n      //   else if (val.indexOf("\'") == 0) { val = val.replace(/\'/g, \'\'); }\n      //   else if (val == \'true\') { val = true; }\n      //   else if (val == \'false\') { val = false; }\n      //   result[item[0].trim()] = val; \n      // });\n      // return result;\n    }\n  }]);\n\n  return _default;\n}();\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbW9qby9meC9GeFNjYW5uZXIuanM/MDI0MSJdLCJzb3VyY2VzQ29udGVudCI6WyJmdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIHByb3BzKSB7IGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHsgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTsgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlOyBkZXNjcmlwdG9yLmNvbmZpZ3VyYWJsZSA9IHRydWU7IGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTsgfSB9XG5cbmZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7IGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9XG5cbi8vIFNDQU4gRk9SIEZYXG5pbXBvcnQgRnhCYXNlIGZyb20gJy4vRnhCYXNlJztcbnZhciBMT0cgPSAnWyBGeFNjYW5uZXIgXSc7XG52YXIgREVCVUcgPSB0cnVlO1xuXG52YXIgX2RlZmF1bHQgPVxuLyojX19QVVJFX18qL1xuZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgX2RlZmF1bHQpO1xuICB9XG5cbiAgX2NyZWF0ZUNsYXNzKF9kZWZhdWx0LCBudWxsLCBbe1xuICAgIGtleTogXCJzY2FuXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHNjYW4oY29udGV4dCkge1xuICAgICAgaWYgKGNvbnRleHQgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgIHRoaXMuX3NjYW5FbGVtZW50KGNvbnRleHQpO1xuICAgICAgfVxuICAgIH1cbiAgfSwge1xuICAgIGtleTogXCJfc2NhbkVsZW1lbnRcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3NjYW5FbGVtZW50KGVsZW1lbnQpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIE9iamVjdC5rZXlzKG1vam8uZngpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgaWYgKG1vam8uZnhbaXRlbV0ucHJvdG90eXBlIGluc3RhbmNlb2YgRnhCYXNlKSB7XG4gICAgICAgICAgX3RoaXMuX3Byb2Nlc3NGeChlbGVtZW50LCBpdGVtKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcIl9wcm9jZXNzRnhcIixcbiAgICB2YWx1ZTogZnVuY3Rpb24gX3Byb2Nlc3NGeChlbGVtZW50LCBmeCkge1xuICAgICAgdmFyIGF0dHIgPSBcIm1vam8tZngtXCIuY29uY2F0KG1vam8uZnhbZnhdLm1hbmlmZXN0LmlkKTtcbiAgICAgIHZhciBlbGVtZW50cyA9IGVsZW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltcIi5jb25jYXQoYXR0ciwgXCJdXCIpKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgX2VsZW1lbnQgPSBlbGVtZW50c1tpXTtcbiAgICAgICAgaWYgKF9lbGVtZW50Lm1vam8gJiYgX2VsZW1lbnQubW9qby5zY2FubmVkW2Z4XSkgY29udGludWU7XG4gICAgICAgIHZhciBvcHRpb25zID0gdGhpcy5leHRyYWN0T3B0aW9ucyhfZWxlbWVudC5nZXRBdHRyaWJ1dGUoYXR0cikpO1xuICAgICAgICB2YXIgdHJpZ2dlciA9IG9wdGlvbnMudHJpZ2dlciB8fCBtb2pvLmZ4W2Z4XS5tYW5pZmVzdC5vcHRpb25zLnRyaWdnZXIgfHwgJ2NsaWNrJztcbiAgICAgICAgREVCVUcgJiYgY29uc29sZS5sb2coTE9HLCAnX3Byb2Nlc3NGeCgpJywgXCJmeDogXCIuY29uY2F0KGZ4KSk7XG4gICAgICAgIG1vam8uYWRkKF9lbGVtZW50LCB0cmlnZ2VyLCBtb2pvLmZ4W2Z4XSwgb3B0aW9ucyk7XG4gICAgICAgIG1vam8ucHJlcGFyZUVsZW1lbnQoX2VsZW1lbnQpOyAvLyBlbGVtZW50Lm1vam8uc2Nhbm5lZCA9IHRydWU7XG5cbiAgICAgICAgX2VsZW1lbnQubW9qby5zY2FubmVkW2Z4XSA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiBcImV4dHJhY3RPcHRpb25zXCIsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGV4dHJhY3RPcHRpb25zKHJhdykge1xuICAgICAgaWYgKCFyYXcpIHJldHVybiB7fTsgLy8gRXZhbCBzb2x1dGlvblxuXG4gICAgICByZXR1cm4gZXZhbChcIihmdW5jdGlvbigpIHsgcmV0dXJuIFwiLmNvbmNhdChyYXcsIFwifSkoKVwiKSk7IC8vIFByaW1pdGl2ZSB2ZXJzaW9uIChvbmx5IHN1cHBvcnQgZmxhdCBub24tbmVzdGVkIHZhbHVlcywgbm8gYXJyYXlzICwgbm8gb2JqZWN0cylcbiAgICAgIC8vIHJhdyA9IHJhdy5yZXBsYWNlKC97KC4qKX0vLCAnJDEnKTtcbiAgICAgIC8vIGxldCBhcmdzID0gcmF3LnNwbGl0KCcsJykubWFwKCAoaXRlbSkgPT4gaXRlbS50cmltKCkuc3BsaXQoJzonKSApO1xuICAgICAgLy8gbGV0IHJlc3VsdCA9IHt9O1xuICAgICAgLy8gYXJncy5mb3JFYWNoKGl0ZW0gPT4geyBcbiAgICAgIC8vICAgbGV0IHZhbCA9IGl0ZW1bMV0udHJpbSgpO1xuICAgICAgLy8gICBpZiAoIWlzTmFOKHZhbCkpIHsgdmFsID0gK3ZhbDsgfVxuICAgICAgLy8gICBlbHNlIGlmICh2YWwuaW5kZXhPZihcIidcIikgPT0gMCkgeyB2YWwgPSB2YWwucmVwbGFjZSgvJy9nLCAnJyk7IH1cbiAgICAgIC8vICAgZWxzZSBpZiAodmFsID09ICd0cnVlJykgeyB2YWwgPSB0cnVlOyB9XG4gICAgICAvLyAgIGVsc2UgaWYgKHZhbCA9PSAnZmFsc2UnKSB7IHZhbCA9IGZhbHNlOyB9XG4gICAgICAvLyAgIHJlc3VsdFtpdGVtWzBdLnRyaW0oKV0gPSB2YWw7IFxuICAgICAgLy8gfSk7XG4gICAgICAvLyByZXR1cm4gcmVzdWx0O1xuICAgIH1cbiAgfV0pO1xuXG4gIHJldHVybiBfZGVmYXVsdDtcbn0oKTtcblxuZXhwb3J0IHsgX2RlZmF1bHQgYXMgZGVmYXVsdCB9OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///11\n')},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// EXTERNAL MODULE: ./node_modules/lodash.throttle/index.js\nvar lodash_throttle = __webpack_require__(9);\nvar lodash_throttle_default = /*#__PURE__*/__webpack_require__.n(lodash_throttle);\n\n// EXTERNAL MODULE: ./node_modules/lodash.debounce/index.js\nvar lodash_debounce = __webpack_require__(10);\nvar lodash_debounce_default = /*#__PURE__*/__webpack_require__.n(lodash_debounce);\n\n// CONCATENATED MODULE: ./src/mojo/core/Brain.js\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nvar LOG = \'[ Brain ]\';\nvar DEBUG = true;\n\nvar Brain_default =\n/*#__PURE__*/\nfunction () {\n  function _default() {\n    _classCallCheck(this, _default);\n\n    DEBUG && console.log(LOG, \'constructor()\');\n  }\n\n  _createClass(_default, [{\n    key: "add",\n    value: function add(p) {\n      console.log(LOG, \'add() p:\', p);\n    }\n  }]);\n\n  return _default;\n}();\n\n\n// EXTERNAL MODULE: ./src/mojo/fx/FxBase.js\nvar FxBase = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/mojo/core/Mojo.js\nfunction _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }\n\nfunction Mojo_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Mojo_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Mojo_createClass(Constructor, protoProps, staticProps) { if (protoProps) Mojo_defineProperties(Constructor.prototype, protoProps); if (staticProps) Mojo_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\nvar Mojo_LOG = \'[ Mojo ]\';\nvar Mojo_DEBUG = true;\n\nvar Mojo_default =\n/*#__PURE__*/\nfunction () {\n  /**\n   * Constructor\n   */\n  function _default() {\n    Mojo_classCallCheck(this, _default);\n\n    _defineProperty(this, "brain", void 0);\n\n    this.brain = new Brain_default();\n    Mojo_DEBUG && console.log(Mojo_LOG, \'constructor()\');\n  }\n  /**\n   * Add\n   * For parameters also see addBehavior()\n   * @example\n   * \n   *  // Effect Behavior\n   *  mojo.add(el, \'click\', mojo.fx.Magnet, {delay: 100});\n   * \n   *  // Custom behavior\n   *  mojo.add(el, \'toggle\', {\n   *    start: () => {\n   *      console.log(\'START\');\n   *    },\n   *    end: () => {\n   *      console.log(\'END\');\n   *    }\n   *  });\n   */\n\n\n  Mojo_createClass(_default, [{\n    key: "add",\n    value: function add() {\n      // Delegate depending on signature\n      if (arguments[0] instanceof Element && (typeof arguments[1] === \'string\' || _typeof(arguments[1]) === \'object\' && typeof arguments[1].type === \'string\') && arguments[2].prototype instanceof mojo.fx.FxBase) {\n        this.addEffectBehavior.apply(this, arguments);\n      } else if (arguments[0] instanceof Element && (typeof arguments[1] === \'string\' || _typeof(arguments[1]) === \'object\' && typeof arguments[1].type === \'string\') && _typeof(arguments[2]) === \'object\') {\n        this.addBehavior.apply(this, arguments);\n      } else {\n        console.log(Mojo_LOG, \'add()\', \'unknown signature\');\n      }\n    }\n    /**\n     * Add Effect Behavior\n     * @param {HTMLElement} el The host element to add the behavior to\n     * @param {(string|object)} trigger The trigger type (e.g. click, hover, toggle etc.)\n     *                                  E.g. \'click\' or {type: \'hover\', area: \'#custom-trigger-area\'}\n     * @param {FxBase} Fx The effect class to apply (e.g. mojo.fx.Magnet)\n     * @param {object} [fxOptions] Optional effect options (e.g {speed: 2})\n     */\n\n  }, {\n    key: "addEffectBehavior",\n    value: function addEffectBehavior(el, trigger, Fx, fxOptions) {\n      //---\n      // Create fx\n      fxOptions = fxOptions ? fxOptions : {};\n      var fx = new Fx(el, fxOptions);\n      el = fx.element;\n      this.addBehavior(el, trigger, fx, fxOptions ? fxOptions.id : undefined);\n    }\n    /**\n     * Add behavior\n     * (supports automatic area detection: if next node has attribute "mojo-trigger-area" )\n     * @param {HTMLElement} el The host element to add the behavior to\n     * @param {(string|object)} trigger The trigger type (e.g. click, hover, toggle etc.)\n     *                                  E.g. \'click\' or {type: \'hover\', area: \'#custom-trigger-area\'}\n     * @param {Object} action Action object\n     * @param {Function} action.start Start function\n     * @param {Function} action.end End function\n     * @param {string} [id] Optional id\n     */\n\n  }, {\n    key: "addBehavior",\n    value: function addBehavior(el, trigger, action, id) {\n      Mojo_DEBUG && console.log(Mojo_LOG, \'addBehavior()\', el, trigger, action, id);\n      var triggerType = typeof trigger === \'string\' ? trigger : trigger.type,\n          standard = true,\n          startTrigger,\n          endTrigger; //---\n      // Area\n\n      var area = typeof trigger === \'string\' ? el : typeof trigger.area === \'string\' ? document.querySelector(trigger.area) : trigger.area;\n\n      if (area == el) {\n        // Auto detect area (next node has "mojo-trigger-area" attribute)\n        if (el.nextElementSibling && el.nextElementSibling.hasAttribute(\'mojo-trigger-area\')) {\n          if (el.nextElementSibling.tagName == \'svg\') {\n            area = el.nextElementSibling.firstChild;\n            el.nextElementSibling.style.pointerEvents = \'none\';\n          } else {\n            area = el.nextElementSibling;\n          }\n\n          el.style.pointerEvents = \'none\';\n        }\n      } //---\n      // Trigger type\n\n\n      switch (triggerType) {\n        case \'\':\n        case \'auto\':\n          standard = false;\n          break;\n\n        case \'click\':\n          startTrigger = \'click\';\n          break;\n\n        case \'hover\':\n          startTrigger = \'mouseenter\';\n          endTrigger = \'mouseleave\';\n          break;\n\n        case \'toggle\':\n          startTrigger = \'click\';\n          endTrigger = \'click\';\n          standard = false;\n          break;\n\n        default:\n          // e.g. mouseenter, mouseleave, blur, focus etc.\n          startTrigger = triggerType;\n      } //---\n      // Setup triggering (event listeners etc.)\n\n\n      if (standard) {\n        // startTrigger && area.addEventListener(startTrigger, startFunc);\n        // endTrigger && area.addEventListener(endTrigger, endFunc);\n        startTrigger && action.start && area.addEventListener(startTrigger, action.start.bind(action, el));\n        endTrigger && action.end && area.addEventListener(endTrigger, action.end.bind(action, el));\n      } else {\n        switch (triggerType) {\n          case \'\':\n          case \'auto\':\n            action.start();\n            break;\n\n          case \'toggle\':\n            var on = true;\n            area.addEventListener(\'click\', function (evt) {\n              on ? action.start(el) : action.end(el);\n              on = !on;\n            });\n            break;\n        }\n      } //---\n      // Memorize on element level if fx has id\n\n\n      if (id) {\n        Mojo_DEBUG && console.log(Mojo_LOG, \'addBehavior()\', \'Memorize on element with id:\', id);\n        this.prepareElement(el);\n        el.mojo.fx.push(action);\n      }\n    }\n    /**\n     * Prepare element\n     */\n\n  }, {\n    key: "prepareElement",\n    value: function prepareElement(el) {\n      !el.mojo && (el.mojo = {\n        fx: [],\n        scanned: {}\n      });\n    }\n  }]);\n\n  return _default;\n}();\n\n\n// EXTERNAL MODULE: ./src/mojo/fx/FxScanner.js\nvar FxScanner = __webpack_require__(11);\n\n// CONCATENATED MODULE: ./src/mojo/fx/core/Glitch.js\nfunction Glitch_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Glitch_typeof = function _typeof(obj) { return typeof obj; }; } else { Glitch_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Glitch_typeof(obj); }\n\nfunction Glitch_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Glitch_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Glitch_createClass(Constructor, protoProps, staticProps) { if (protoProps) Glitch_defineProperties(Constructor.prototype, protoProps); if (staticProps) Glitch_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (Glitch_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nfunction Glitch_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar Glitch_LOG = \'[ FX : Glitch ]\';\nvar Glitch_DEBUG = true;\n\nvar Glitch_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  _inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    Glitch_classCallCheck(this, _default);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(_default).apply(this, arguments));\n\n    Glitch_defineProperty(_assertThisInitialized(_this), "src", void 0);\n\n    Glitch_defineProperty(_assertThisInitialized(_this), "canvas", void 0);\n\n    Glitch_defineProperty(_assertThisInitialized(_this), "stage", void 0);\n\n    Glitch_defineProperty(_assertThisInitialized(_this), "width", void 0);\n\n    Glitch_defineProperty(_assertThisInitialized(_this), "height", void 0);\n\n    Glitch_defineProperty(_assertThisInitialized(_this), "dpr", !window.devicePixelRatio ? 1 : window.devicePixelRatio >= 2 ? 2 : 1);\n\n    Glitch_defineProperty(_assertThisInitialized(_this), "segments", []);\n\n    _get(_getPrototypeOf(_default.prototype), "init", _assertThisInitialized(_this)).call(_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  Glitch_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      var _this2 = this;\n\n      // Save original image\n      this.original = this.element;\n      this.src = this.original.getAttribute(\'src\'); // Create canvas\n\n      var canvas = this.canvas = document.createElement(\'canvas\');\n      this.original.getAttribute(\'id\') && canvas.setAttribute(\'id\', this.original.getAttribute(\'id\'));\n      this.stage = new createjs.Stage(this.canvas);\n      this.original.parentNode.insertBefore(this.canvas, this.original.nextSibling);\n      this.original.style.opacity = 0;\n      this.original.style.pointerEvents = \'none\';\n      var computedStyle = window.getComputedStyle(this.original);\n      canvas.style.width = computedStyle.width;\n      canvas.style.height = computedStyle.height;\n      canvas.style.left = computedStyle.left;\n      canvas.style.top = computedStyle.top;\n      canvas.style.transform = computedStyle.transform; // canvas.style.pointerEvents = \'none\';\n\n      this.width = parseInt(computedStyle.width) * this.dpr;\n      this.height = parseInt(computedStyle.height) * this.dpr; // let rect = canvas.getBoundingClientRect();\n      // canvas.width = rect.width * this.dpr;\n      // canvas.height = rect.height * this.dpr;\n      // canvas.getContext(\'2d\').scale(this.dpr, this.dpr);\n\n      canvas.width = canvas.clientWidth * this.dpr;\n      canvas.height = canvas.clientHeight * this.dpr;\n      canvas.getContext(\'2d\').scale(this.dpr, this.dpr);\n      this.element = this.canvas; // this.original.parentNode.removeChild(this.original);\n      // this.original.remove();\n\n      this.original.removeAttribute(\'id\'); // Create segments\n\n      var seedIndex = 0,\n          top = 0;\n\n      while (true) {\n        var seed = Math.round(this.options.seed[seedIndex] * this.options.factor);\n        var image = new createjs.Bitmap(this.src);\n        var shape = new createjs.Shape();\n        shape.graphics.beginFill("#FFFFFF").drawRect(0, top, this.width, seed);\n        image.mask = shape;\n        this.stage.addChild(image);\n        this.segments.push(image); // End\n\n        if (top >= parseInt(computedStyle.height) * this.dpr) break; // Iterate \n\n        top += seed;\n        seedIndex = seedIndex >= this.options.seed.length - 1 ? 0 : ++seedIndex;\n      } // Timeline\n\n\n      this.timeline = gsap.timeline({\n        paused: true,\n        delay: this.options.delay / 1000,\n        repeat: this.options.repeat,\n        repeatDelay: this.options.repeatDelay / 1000,\n        yoyo: this.options.yoyo,\n        onUpdate: this.stage.update.bind(this.stage)\n      });\n      this.segments.forEach(function (segment, index) {\n        _this2.timeline.from(segment, {\n          x: (Math.random() - .5) * 20 * _this2.options.power,\n          alpha: 0,\n          duration: 0.5,\n          ease: _this2.options.easeing\n        }, "".concat(index * _this2.options.stagger / 1000));\n      });\n      this.timeline.timeScale(this.timeline.duration() / (this.options.duration / 1000));\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      this.timeline.play();\n    }\n  }, {\n    key: "end",\n    value: function end() {\n      this.timeline.reverse();\n    }\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nGlitch_defineProperty(Glitch_default, "manifest", {\n  id: \'glitch\',\n  options: {\n    trigger: \'hover\',\n    duration: 1000,\n    delay: 0,\n    repeat: 0,\n    repeatDelay: 1000,\n    yoyo: true,\n    seed: [1, 6, 3, 1, 3, 8, 2, 1, 9, 4, 7, 1],\n    factor: 10,\n    power: 80,\n    stagger: 10,\n    easing: \'power4.inOut\' // back.out(3),\n\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/core/Magnet.js\nfunction Magnet_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Magnet_typeof = function _typeof(obj) { return typeof obj; }; } else { Magnet_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Magnet_typeof(obj); }\n\nfunction Magnet_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Magnet_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Magnet_createClass(Constructor, protoProps, staticProps) { if (protoProps) Magnet_defineProperties(Constructor.prototype, protoProps); if (staticProps) Magnet_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Magnet_possibleConstructorReturn(self, call) { if (call && (Magnet_typeof(call) === "object" || typeof call === "function")) { return call; } return Magnet_assertThisInitialized(self); }\n\nfunction Magnet_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Magnet_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Magnet_setPrototypeOf(subClass, superClass); }\n\nfunction Magnet_setPrototypeOf(o, p) { Magnet_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Magnet_setPrototypeOf(o, p); }\n\nfunction Magnet_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { Magnet_get = Reflect.get; } else { Magnet_get = function _get(target, property, receiver) { var base = Magnet_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return Magnet_get(target, property, receiver || target); }\n\nfunction Magnet_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Magnet_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Magnet_getPrototypeOf(o) { Magnet_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Magnet_getPrototypeOf(o); }\n\nfunction Magnet_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar Magnet_LOG = \'[ FX : Magnet ]\';\nvar Magnet_DEBUG = false;\n\nvar Magnet_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  Magnet_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    Magnet_classCallCheck(this, _default);\n\n    _this = Magnet_possibleConstructorReturn(this, Magnet_getPrototypeOf(_default).apply(this, arguments));\n\n    Magnet_get(Magnet_getPrototypeOf(_default.prototype), "init", Magnet_assertThisInitialized(_this)).call(Magnet_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  Magnet_createClass(_default, [{\n    key: "init",\n    value: function init() {}\n  }, {\n    key: "start",\n    value: function start() {\n      gsap.to(this.element, {\n        scale: this.options.scale,\n        transformOrigin: \'50% 50%\',\n        delay: this.options.delay / 1000,\n        duration: this.options.duration / 1000,\n        ease: \'power4.out(9)\'\n      });\n    }\n  }, {\n    key: "end",\n    value: function end() {\n      gsap.isTweening(this.element) && gsap.killTweensOf(this.element, \'scale\');\n      gsap.to(this.element, {\n        scale: 1,\n        duration: this.options.duration / 1000,\n        ease: this.options.easeOut\n      });\n    }\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nMagnet_defineProperty(Magnet_default, "manifest", {\n  id: \'magnet\',\n  options: {\n    trigger: \'hover\',\n    delay: 0,\n    duration: 500,\n    scale: 1.2,\n    easeOut: \'back.out(3)\'\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/core/Hide.js\nfunction Hide_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Hide_typeof = function _typeof(obj) { return typeof obj; }; } else { Hide_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Hide_typeof(obj); }\n\nfunction Hide_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Hide_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Hide_createClass(Constructor, protoProps, staticProps) { if (protoProps) Hide_defineProperties(Constructor.prototype, protoProps); if (staticProps) Hide_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Hide_possibleConstructorReturn(self, call) { if (call && (Hide_typeof(call) === "object" || typeof call === "function")) { return call; } return Hide_assertThisInitialized(self); }\n\nfunction Hide_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Hide_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Hide_setPrototypeOf(subClass, superClass); }\n\nfunction Hide_setPrototypeOf(o, p) { Hide_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Hide_setPrototypeOf(o, p); }\n\nfunction Hide_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { Hide_get = Reflect.get; } else { Hide_get = function _get(target, property, receiver) { var base = Hide_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return Hide_get(target, property, receiver || target); }\n\nfunction Hide_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Hide_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Hide_getPrototypeOf(o) { Hide_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Hide_getPrototypeOf(o); }\n\nfunction Hide_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar Hide_LOG = \'[ FX : Hide ]\';\nvar Hide_DEBUG = false;\n\nvar Hide_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  Hide_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    Hide_classCallCheck(this, _default);\n\n    _this = Hide_possibleConstructorReturn(this, Hide_getPrototypeOf(_default).apply(this, arguments));\n\n    Hide_get(Hide_getPrototypeOf(_default.prototype), "init", Hide_assertThisInitialized(_this)).call(Hide_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  Hide_createClass(_default, [{\n    key: "init",\n    value: function init() {}\n  }, {\n    key: "start",\n    value: function start() {\n      this.element.style.opacity = 0;\n    }\n  }, {\n    key: "end",\n    value: function end() {}\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nHide_defineProperty(Hide_default, "manifest", {\n  id: \'hide\',\n  options: {\n    trigger: \'auto\'\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/anime/Magnet.js\nfunction anime_Magnet_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { anime_Magnet_typeof = function _typeof(obj) { return typeof obj; }; } else { anime_Magnet_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return anime_Magnet_typeof(obj); }\n\nfunction anime_Magnet_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction anime_Magnet_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction anime_Magnet_createClass(Constructor, protoProps, staticProps) { if (protoProps) anime_Magnet_defineProperties(Constructor.prototype, protoProps); if (staticProps) anime_Magnet_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction anime_Magnet_possibleConstructorReturn(self, call) { if (call && (anime_Magnet_typeof(call) === "object" || typeof call === "function")) { return call; } return anime_Magnet_assertThisInitialized(self); }\n\nfunction anime_Magnet_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction anime_Magnet_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) anime_Magnet_setPrototypeOf(subClass, superClass); }\n\nfunction anime_Magnet_setPrototypeOf(o, p) { anime_Magnet_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return anime_Magnet_setPrototypeOf(o, p); }\n\nfunction anime_Magnet_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { anime_Magnet_get = Reflect.get; } else { anime_Magnet_get = function _get(target, property, receiver) { var base = anime_Magnet_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return anime_Magnet_get(target, property, receiver || target); }\n\nfunction anime_Magnet_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = anime_Magnet_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction anime_Magnet_getPrototypeOf(o) { anime_Magnet_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return anime_Magnet_getPrototypeOf(o); }\n\nfunction anime_Magnet_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar anime_Magnet_LOG = \'[ FX : AnimateMagnet (Anime) ]\';\nvar anime_Magnet_DEBUG = true;\n\nvar anime_Magnet_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  anime_Magnet_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    anime_Magnet_classCallCheck(this, _default);\n\n    _this = anime_Magnet_possibleConstructorReturn(this, anime_Magnet_getPrototypeOf(_default).apply(this, arguments));\n\n    anime_Magnet_defineProperty(anime_Magnet_assertThisInitialized(_this), "an", void 0);\n\n    anime_Magnet_get(anime_Magnet_getPrototypeOf(_default.prototype), "init", anime_Magnet_assertThisInitialized(_this)).call(anime_Magnet_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  anime_Magnet_createClass(_default, [{\n    key: "init",\n    value: function init() {}\n  }, {\n    key: "start",\n    value: function start() {\n      this.cancelAnimation(this.an);\n      this.an = anime({\n        targets: this.element,\n        scale: this.options.scale,\n        duration: 600,\n        easing: \'easeOutExpo\'\n      });\n    }\n  }, {\n    key: "end",\n    value: function end() {\n      // gsap.isTweening(this.element) && gsap.killTweensOf(this.element);\n      // gsap.to(this.element, {scale: 1, duration: 0.4, ease: this.options.easeOut});\n      // this.an.end.restart();\n      this.cancelAnimation(this.an);\n      this.an = anime({\n        targets: this.element,\n        scale: 1,\n        duration: 400,\n        easing: \'easeOutBack\'\n      });\n    }\n  }, {\n    key: "cancelAnimation",\n    value: function cancelAnimation(animation) {\n      animation && animation.pause(); // let activeInstances = anime.running;\n      // let index = activeInstances.indexOf(animation);\n      // activeInstances.splice(index, 1);\n    }\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nanime_Magnet_defineProperty(anime_Magnet_default, "manifest", {\n  id: \'Magnet\',\n  options: {\n    scale: 1.2,\n    easeOut: \'back.out(3)\'\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/TypeAnimation.js\nfunction TypeAnimation_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { TypeAnimation_typeof = function _typeof(obj) { return typeof obj; }; } else { TypeAnimation_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return TypeAnimation_typeof(obj); }\n\nfunction TypeAnimation_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction TypeAnimation_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction TypeAnimation_createClass(Constructor, protoProps, staticProps) { if (protoProps) TypeAnimation_defineProperties(Constructor.prototype, protoProps); if (staticProps) TypeAnimation_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction TypeAnimation_possibleConstructorReturn(self, call) { if (call && (TypeAnimation_typeof(call) === "object" || typeof call === "function")) { return call; } return TypeAnimation_assertThisInitialized(self); }\n\nfunction TypeAnimation_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction TypeAnimation_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) TypeAnimation_setPrototypeOf(subClass, superClass); }\n\nfunction TypeAnimation_setPrototypeOf(o, p) { TypeAnimation_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return TypeAnimation_setPrototypeOf(o, p); }\n\nfunction TypeAnimation_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { TypeAnimation_get = Reflect.get; } else { TypeAnimation_get = function _get(target, property, receiver) { var base = TypeAnimation_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return TypeAnimation_get(target, property, receiver || target); }\n\nfunction TypeAnimation_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = TypeAnimation_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction TypeAnimation_getPrototypeOf(o) { TypeAnimation_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return TypeAnimation_getPrototypeOf(o); }\n\nfunction TypeAnimation_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar TypeAnimation_LOG = \'[ FX : TypeAnimation ]\';\nvar TypeAnimation_DEBUG = true;\n\nvar TypeAnimation_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  TypeAnimation_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    TypeAnimation_classCallCheck(this, _default);\n\n    _this = TypeAnimation_possibleConstructorReturn(this, TypeAnimation_getPrototypeOf(_default).apply(this, arguments));\n\n    TypeAnimation_get(TypeAnimation_getPrototypeOf(_default.prototype), "init", TypeAnimation_assertThisInitialized(_this)).call(TypeAnimation_assertThisInitialized(_this));\n\n    TypeAnimation_get(TypeAnimation_getPrototypeOf(_default.prototype), "start", TypeAnimation_assertThisInitialized(_this)).call(TypeAnimation_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  TypeAnimation_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      TypeAnimation_DEBUG && console.log(TypeAnimation_LOG, \'init()\', this.options); // Prepare elements\n      // Wrap every letter in a span\n      // this.element.innerHTML = this.element.textContent.replace(/\\S/g, "<span class=\'letter\'>$&</span>");\n\n      this.element.innerHTML = this.element.textContent.replace(/[\\S\\W]/g, "<span class=\'letter\'>$&</span>").replace(/> </g, ">&nbsp;<");\n      gsap.set(this.element.querySelectorAll(\'.letter\'), {\n        display: \'inline-block\',\n        opacity: 0\n      });\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      TypeAnimation_DEBUG && console.log(TypeAnimation_LOG, \'start()\');\n      gsap.fromTo(this.element.querySelectorAll(\'.letter\'), {\n        scale: 2\n      }, {\n        opacity: 1,\n        scale: 1,\n        delay: this.options.delay,\n        duration: 0.2,\n        stagger: 1 / (this.options.speed / 2),\n        ease: \'back.out(3)\'\n      });\n    }\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nTypeAnimation_defineProperty(TypeAnimation_default, "manifest", {\n  id: \'type\',\n  options: {\n    trigger: \'auto\',\n    speed: 100,\n    delay: .5\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/Particles.js\nfunction Particles_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Particles_typeof = function _typeof(obj) { return typeof obj; }; } else { Particles_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Particles_typeof(obj); }\n\nfunction Particles_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Particles_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Particles_createClass(Constructor, protoProps, staticProps) { if (protoProps) Particles_defineProperties(Constructor.prototype, protoProps); if (staticProps) Particles_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Particles_possibleConstructorReturn(self, call) { if (call && (Particles_typeof(call) === "object" || typeof call === "function")) { return call; } return Particles_assertThisInitialized(self); }\n\nfunction Particles_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Particles_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Particles_setPrototypeOf(subClass, superClass); }\n\nfunction Particles_setPrototypeOf(o, p) { Particles_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Particles_setPrototypeOf(o, p); }\n\nfunction Particles_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { Particles_get = Reflect.get; } else { Particles_get = function _get(target, property, receiver) { var base = Particles_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return Particles_get(target, property, receiver || target); }\n\nfunction Particles_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Particles_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Particles_getPrototypeOf(o) { Particles_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Particles_getPrototypeOf(o); }\n\nfunction Particles_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar Particles_LOG = \'[ FX : Particles ]\';\nvar Particles_DEBUG = true;\n\nvar Particles_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  Particles_inherits(_default, _FxBase);\n\n  // Effect center\n  function _default() {\n    var _this;\n\n    Particles_classCallCheck(this, _default);\n\n    _this = Particles_possibleConstructorReturn(this, Particles_getPrototypeOf(_default).apply(this, arguments));\n\n    Particles_defineProperty(Particles_assertThisInitialized(_this), "center", {\n      left: 0,\n      top: 0\n    });\n\n    Particles_get(Particles_getPrototypeOf(_default.prototype), "init", Particles_assertThisInitialized(_this)).call(Particles_assertThisInitialized(_this));\n\n    return _this;\n  } // TEMP: Use FusionHelper instead\n  // TEMP: Use FusionHelper instead\n\n\n  Particles_createClass(_default, [{\n    key: "appendHtml",\n    value: function appendHtml(target, markup) {\n      target.insertAdjacentHTML(\'beforeend\', markup);\n      return target.lastChild;\n    }\n  }, {\n    key: "init",\n    value: function init() {\n      Particles_DEBUG && console.log(Particles_LOG, \'init()\', this.options);\n      this.appendHtml(document.body, "<svg xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" width=\\"82\\" height=\\"129\\" viewBox=\\"0 0 82 129\\" style=\\"display: none\\">\\n      <circle id=\\"tplCircle\\" cx=\\"9.5\\" cy=\\"9.5\\" r=\\"9.5\\" fill=\\"none\\" stroke=\\"#fff\\" stroke-width=\\"3\\"/>\\n      <path id=\\"tplTriangle\\" d=\\"M9.5,0,19,17H0Z\\" fill=\\"none\\" stroke=\\"#fff\\" stroke-width=\\"3\\"/>\\n      <rect id=\\"tplRect\\" width=\\"19\\" height=\\"19\\" fill=\\"none\\" stroke=\\"#fff\\" stroke-width=\\"3\\"/>\\n    </svg>"); // Gather templates\n\n      this.templates = [{\n        node: document.getElementById(\'tplCircle\')\n      }, {\n        node: document.getElementById(\'tplTriangle\')\n      }, {\n        node: document.getElementById(\'tplRect\')\n      }]; // Cache width/height\n\n      this.templates.forEach(function (item) {\n        var rect = item.node.getBoundingClientRect();\n        item.width = rect.width;\n        item.height = rect.height;\n      });\n    }\n  }, {\n    key: "update",\n    value: function update() {\n      Particles_DEBUG && console.log(Particles_LOG, \'update()\'); // let computedStyle = window.getComputedStyle(this.element);\n      // this.center = {\n      //   left: parseInt(computedStyle.left) + parseInt(computedStyle.width)/2,\n      //   top: parseInt(computedStyle.top) + parseInt(computedStyle.height)/2 \n      // };\n      // DEBUG && console.log(LOG, \'update() center:\', this.center);\n\n      function getLocalBoundingClientRect(el) {\n        var a = el.getBoundingClientRect();\n        var b = el.parentNode.getBoundingClientRect();\n        return {\n          left: a.left - b.left,\n          top: a.top - b.top,\n          width: a.width,\n          height: a.height\n        };\n      }\n\n      var rect = getLocalBoundingClientRect(this.element);\n      this.center = {\n        left: Math.round(rect.left + rect.width / 2),\n        top: Math.round(rect.top + rect.height / 2)\n      };\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      Particles_DEBUG && console.log(Particles_LOG, \'start()\');\n      this.update();\n      var svg = this.appendHtml(this.element.parentElement, "<svg xmlns=\\"http://www.w3.org/2000/svg\\" xmlns:xlink=\\"http://www.w3.org/1999/xlink\\" width=\\"1\\" height=\\"1\\" viewBox=\\"0 0 1 1\\" style=\\"pointer-events: none; position: absolute; overflow: visible;\\"></svg>");\n      svg.style.left = this.center.left + \'px\';\n      svg.style.top = this.center.top + \'px\'; // Generate\n\n      for (var i = 0; i < 5; i++) {\n        var tpl = this.templates[Math.ceil(Math.random() * this.templates.length) - 1];\n        var node = tpl.node.cloneNode();\n        node.setAttribute(\'id\', \'random-\' + Math.round(Math.random() * 10000000000));\n        node.style.display = \'block\';\n        node.style.opacity = 0; // node.style.transform = \'translate(\'+(originX-tpl.width/2)+\'px, \'+(originY-tpl.height/2)+\'px)\';\n\n        node.style.transform = \'translate(-10px, -10px)\';\n        svg.appendChild(node); //gsap.to(node, {duration: 0.2*i, opacity: 1, y: \'-=80\', rotation: 360, transformOrigin: "50% 50%"});\n\n        var tl = gsap.timeline({\n          delay: 0.05 * i\n        }); // tl.timeScale(0.1);\n\n        var x = i % 2 ? -40 * (Math.random() * 2 * this.options.power) : 40 * (Math.random() * 2 * this.options.power);\n        var y = -30 * (i / 2 + 1) * this.options.power;\n        tl.to(node, {\n          duration: 1.4,\n          ease: "power3.out",\n          x: x,\n          y: y,\n          rotation: 130,\n          scale: this.options.scale,\n          transformOrigin: "50% 50%"\n        }, 0);\n        tl.to(node, {\n          duration: 0.2,\n          opacity: 1\n        }, 0);\n        tl.to(node, {\n          duration: 0.3,\n          opacity: 0\n        }, "-=".concat(0.3 * this.options.decay));\n        tl.eventCallback("onComplete", function (node) {\n          var parentNode = node.parentNode;\n          parentNode.removeChild(node);\n\n          if (parentNode.children.length == 0) {\n            parentNode.parentNode.removeChild(parentNode);\n          }\n        }, [node]);\n      }\n    }\n  }, {\n    key: "end",\n    value: function end() {}\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nParticles_defineProperty(Particles_default, "manifest", {\n  id: \'Particles\',\n  options: {\n    trigger: \'click\',\n    scale: 2,\n    power: 2,\n    decay: 3\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/Spritesheet.js\nfunction Spritesheet_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Spritesheet_typeof = function _typeof(obj) { return typeof obj; }; } else { Spritesheet_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Spritesheet_typeof(obj); }\n\nfunction Spritesheet_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Spritesheet_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Spritesheet_createClass(Constructor, protoProps, staticProps) { if (protoProps) Spritesheet_defineProperties(Constructor.prototype, protoProps); if (staticProps) Spritesheet_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Spritesheet_possibleConstructorReturn(self, call) { if (call && (Spritesheet_typeof(call) === "object" || typeof call === "function")) { return call; } return Spritesheet_assertThisInitialized(self); }\n\nfunction Spritesheet_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Spritesheet_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Spritesheet_setPrototypeOf(subClass, superClass); }\n\nfunction Spritesheet_setPrototypeOf(o, p) { Spritesheet_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Spritesheet_setPrototypeOf(o, p); }\n\nfunction Spritesheet_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { Spritesheet_get = Reflect.get; } else { Spritesheet_get = function _get(target, property, receiver) { var base = Spritesheet_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return Spritesheet_get(target, property, receiver || target); }\n\nfunction Spritesheet_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Spritesheet_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Spritesheet_getPrototypeOf(o) { Spritesheet_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Spritesheet_getPrototypeOf(o); }\n\nfunction Spritesheet_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar Spritesheet_LOG = \'[ FX : Spritesheet ]\';\nvar Spritesheet_DEBUG = false;\n\nvar Spritesheet_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  Spritesheet_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    Spritesheet_classCallCheck(this, _default);\n\n    _this = Spritesheet_possibleConstructorReturn(this, Spritesheet_getPrototypeOf(_default).apply(this, arguments));\n\n    Spritesheet_defineProperty(Spritesheet_assertThisInitialized(_this), "tl", void 0);\n\n    Spritesheet_get(Spritesheet_getPrototypeOf(_default.prototype), "init", Spritesheet_assertThisInitialized(_this)).call(Spritesheet_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  Spritesheet_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      Spritesheet_DEBUG && console.log(Spritesheet_LOG, \'options:\', this.options); // Prepare\n      //#BUG: getBoundingClientRect() is always non-scaled in global space\n      // let bounds = this.element.getBoundingClientRect();\n      // !(this.options.width) && (this.options.width = bounds.width); \n      // !(this.options.height) && (this.options.height = bounds.height);\n      // offsetWidth/offsetHeight seems to work better with scaling\n\n      !this.options.width && (this.options.width = this.element.offsetWidth);\n      !this.options.height && (this.options.height = this.element.offsetHeight); // // Set background image\n\n      this.element.style.backgroundImage = "url(".concat(this.options.src, ")");\n      this.element.style.backgroundPosition = "0 0";\n      this.element.style.backgroundSize = "".concat(this.options.width * this.options.steps, "px");\n      this.element.style.backgroundRepeat = "no-repeat";\n      this.tl = gsap.timeline({\n        paused: true,\n        repeat: this.options.loop ? -1 : 0\n      });\n      this.tl.add(gsap.to(this.element, {\n        duration: this.options.duration / 1000,\n        backgroundPositionX: "-".concat(this.options.width * (this.options.steps - 1), "px"),\n        ease: "steps(".concat(this.options.steps - 1, ")")\n      }));\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      this.tl.play();\n    }\n  }, {\n    key: "end",\n    value: function end() {\n      this.tl.reverse();\n    }\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nSpritesheet_defineProperty(Spritesheet_default, "manifest", {\n  id: \'Spritesheet\',\n  options: {\n    trigger: \'click\',\n    loop: false,\n    duration: 500,\n    width: undefined,\n    height: undefined,\n    steps: undefined\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/Jump.js\nfunction Jump_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Jump_typeof = function _typeof(obj) { return typeof obj; }; } else { Jump_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Jump_typeof(obj); }\n\nfunction Jump_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Jump_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Jump_createClass(Constructor, protoProps, staticProps) { if (protoProps) Jump_defineProperties(Constructor.prototype, protoProps); if (staticProps) Jump_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Jump_possibleConstructorReturn(self, call) { if (call && (Jump_typeof(call) === "object" || typeof call === "function")) { return call; } return Jump_assertThisInitialized(self); }\n\nfunction Jump_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Jump_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Jump_setPrototypeOf(subClass, superClass); }\n\nfunction Jump_setPrototypeOf(o, p) { Jump_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Jump_setPrototypeOf(o, p); }\n\nfunction Jump_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { Jump_get = Reflect.get; } else { Jump_get = function _get(target, property, receiver) { var base = Jump_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return Jump_get(target, property, receiver || target); }\n\nfunction Jump_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Jump_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Jump_getPrototypeOf(o) { Jump_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Jump_getPrototypeOf(o); }\n\nfunction Jump_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar Jump_LOG = \'[ FX : Jump ]\';\nvar Jump_DEBUG = false;\n\nvar Jump_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  Jump_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    Jump_classCallCheck(this, _default);\n\n    _this = Jump_possibleConstructorReturn(this, Jump_getPrototypeOf(_default).apply(this, arguments));\n\n    Jump_defineProperty(Jump_assertThisInitialized(_this), "initial", void 0);\n\n    Jump_get(Jump_getPrototypeOf(_default.prototype), "init", Jump_assertThisInitialized(_this)).call(Jump_assertThisInitialized(_this));\n\n    Jump_get(Jump_getPrototypeOf(_default.prototype), "start", Jump_assertThisInitialized(_this)).call(Jump_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  Jump_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      Jump_DEBUG && console.log(Jump_LOG, \'init()\', this.options);\n      this.initial = {\n        y: gsap.getProperty(this.element, \'y\')\n      };\n      Jump_DEBUG && console.log(Jump_LOG, \'this.initial\', this.initial);\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      Jump_DEBUG && console.log(Jump_LOG, \'start()\');\n      gsap.to(this.element, {\n        y: this.initial.y - 20,\n        duration: 0.4,\n        ease: \'power.out(4)\'\n      });\n      gsap.to(this.element, {\n        y: this.initial.y,\n        duration: 0.5,\n        delay: 0.5,\n        ease: \'bounce.out(20)\'\n      });\n    }\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nJump_defineProperty(Jump_default, "manifest", {\n  id: \'jump\',\n  options: {}\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/HandCursor.js\nfunction HandCursor_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { HandCursor_typeof = function _typeof(obj) { return typeof obj; }; } else { HandCursor_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return HandCursor_typeof(obj); }\n\nfunction HandCursor_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction HandCursor_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction HandCursor_createClass(Constructor, protoProps, staticProps) { if (protoProps) HandCursor_defineProperties(Constructor.prototype, protoProps); if (staticProps) HandCursor_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction HandCursor_possibleConstructorReturn(self, call) { if (call && (HandCursor_typeof(call) === "object" || typeof call === "function")) { return call; } return HandCursor_assertThisInitialized(self); }\n\nfunction HandCursor_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction HandCursor_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) HandCursor_setPrototypeOf(subClass, superClass); }\n\nfunction HandCursor_setPrototypeOf(o, p) { HandCursor_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return HandCursor_setPrototypeOf(o, p); }\n\nfunction HandCursor_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { HandCursor_get = Reflect.get; } else { HandCursor_get = function _get(target, property, receiver) { var base = HandCursor_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return HandCursor_get(target, property, receiver || target); }\n\nfunction HandCursor_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = HandCursor_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction HandCursor_getPrototypeOf(o) { HandCursor_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return HandCursor_getPrototypeOf(o); }\n\nfunction HandCursor_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar HandCursor_LOG = \'[ FX : HandCursor ]\';\nvar HandCursor_DEBUG = true;\n\nvar HandCursor_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  HandCursor_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    HandCursor_classCallCheck(this, _default);\n\n    _this = HandCursor_possibleConstructorReturn(this, HandCursor_getPrototypeOf(_default).apply(this, arguments));\n\n    HandCursor_get(HandCursor_getPrototypeOf(_default.prototype), "init", HandCursor_assertThisInitialized(_this)).call(HandCursor_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  HandCursor_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      HandCursor_DEBUG && console.log(HandCursor_LOG, \'init()\', this.options);\n      this.element.style.cursor = \'pointer\';\n    }\n  }, {\n    key: "start",\n    value: function start() {}\n    /**\n     * Generate elements\n     */\n\n  }, {\n    key: "generateElements",\n    value: function generateElements() {}\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nHandCursor_defineProperty(HandCursor_default, "manifest", {\n  id: \'hand-cursor\',\n  options: {\n    trigger: \'auto\'\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/Debugger.js\nfunction Debugger_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Debugger_typeof = function _typeof(obj) { return typeof obj; }; } else { Debugger_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Debugger_typeof(obj); }\n\nfunction Debugger_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Debugger_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Debugger_createClass(Constructor, protoProps, staticProps) { if (protoProps) Debugger_defineProperties(Constructor.prototype, protoProps); if (staticProps) Debugger_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Debugger_possibleConstructorReturn(self, call) { if (call && (Debugger_typeof(call) === "object" || typeof call === "function")) { return call; } return Debugger_assertThisInitialized(self); }\n\nfunction Debugger_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Debugger_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Debugger_setPrototypeOf(subClass, superClass); }\n\nfunction Debugger_setPrototypeOf(o, p) { Debugger_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Debugger_setPrototypeOf(o, p); }\n\nfunction Debugger_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { Debugger_get = Reflect.get; } else { Debugger_get = function _get(target, property, receiver) { var base = Debugger_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return Debugger_get(target, property, receiver || target); }\n\nfunction Debugger_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Debugger_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Debugger_getPrototypeOf(o) { Debugger_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Debugger_getPrototypeOf(o); }\n\nfunction Debugger_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar Debugger_LOG = \'[ FX : Debugger ]\';\nvar Debugger_DEBUG = true;\n\nvar Debugger_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  Debugger_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    Debugger_classCallCheck(this, _default);\n\n    _this = Debugger_possibleConstructorReturn(this, Debugger_getPrototypeOf(_default).apply(this, arguments));\n\n    Debugger_get(Debugger_getPrototypeOf(_default.prototype), "init", Debugger_assertThisInitialized(_this)).call(Debugger_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  Debugger_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      console.log(\'\\n\\n\');\n\n      function getLocalBoundingClientRect(el) {\n        var a = el.getBoundingClientRect();\n        var b = el.parentNode.getBoundingClientRect();\n        return {\n          left: a.left - b.left,\n          top: a.top - b.top,\n          width: a.width,\n          height: a.height\n        };\n      } // Client Rect\n\n\n      var clientRect = this.element.getBoundingClientRect();\n      console.log(\'clientRect:\', clientRect);\n      var parentClientRect = this.element.parentNode.getBoundingClientRect();\n      console.log(\'parentClientRect:\', parentClientRect);\n      console.log(\'local rect:\', getLocalBoundingClientRect(this.element));\n    }\n  }, {\n    key: "start",\n    value: function start() {}\n  }, {\n    key: "end",\n    value: function end() {}\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nDebugger_defineProperty(Debugger_default, "manifest", {\n  id: \'Debugger\',\n  options: {\n    trigger: \'auto\'\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/GlitchCanvas.js\nfunction GlitchCanvas_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { GlitchCanvas_typeof = function _typeof(obj) { return typeof obj; }; } else { GlitchCanvas_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return GlitchCanvas_typeof(obj); }\n\nfunction GlitchCanvas_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction GlitchCanvas_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction GlitchCanvas_createClass(Constructor, protoProps, staticProps) { if (protoProps) GlitchCanvas_defineProperties(Constructor.prototype, protoProps); if (staticProps) GlitchCanvas_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction GlitchCanvas_possibleConstructorReturn(self, call) { if (call && (GlitchCanvas_typeof(call) === "object" || typeof call === "function")) { return call; } return GlitchCanvas_assertThisInitialized(self); }\n\nfunction GlitchCanvas_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction GlitchCanvas_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) GlitchCanvas_setPrototypeOf(subClass, superClass); }\n\nfunction GlitchCanvas_setPrototypeOf(o, p) { GlitchCanvas_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return GlitchCanvas_setPrototypeOf(o, p); }\n\nfunction GlitchCanvas_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { GlitchCanvas_get = Reflect.get; } else { GlitchCanvas_get = function _get(target, property, receiver) { var base = GlitchCanvas_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return GlitchCanvas_get(target, property, receiver || target); }\n\nfunction GlitchCanvas_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = GlitchCanvas_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction GlitchCanvas_getPrototypeOf(o) { GlitchCanvas_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return GlitchCanvas_getPrototypeOf(o); }\n\nfunction GlitchCanvas_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar GlitchCanvas_LOG = \'[ FX : GlitchCanvas ]\';\nvar GlitchCanvas_DEBUG = true;\n\nvar GlitchCanvas_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  GlitchCanvas_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    GlitchCanvas_classCallCheck(this, _default);\n\n    _this = GlitchCanvas_possibleConstructorReturn(this, GlitchCanvas_getPrototypeOf(_default).apply(this, arguments));\n\n    GlitchCanvas_get(GlitchCanvas_getPrototypeOf(_default.prototype), "init", GlitchCanvas_assertThisInitialized(_this)).call(GlitchCanvas_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  GlitchCanvas_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      var _this2 = this;\n\n      //---\n      // Inspired by https://codepen.io/Blummed/pen/lCjiu?editors=0010\n      console.log(GlitchCanvas_LOG, \'options:\', this.options); // Get the device pixel ratio, falling back to 1.\n\n      var dpr = window.devicePixelRatio || 1; // Prepare elements\n\n      this.original = this.element; // let bounds = this.original.getBoundingClientRect();\n      // let computedStyle = window.getComputedStyle(this.original);\n      // Replace element /w canvas\n\n      this.element = document.createElement(\'canvas\');\n      this.original.parentNode.insertBefore(this.element, this.original);\n      this.original.style.opacity = .1;\n      var canvas = this.element;\n      var context = canvas.getContext(\'2d\'),\n          img = new Image(),\n          w,\n          h,\n          offset,\n          glitchInterval,\n          scale;\n      context.scale(dpr, dpr);\n      img.src = this.original.getAttribute(\'src\');\n\n      img.onload = function () {\n        init();\n        window.onresize = init;\n      };\n\n      var init = function init() {\n        clearInterval(glitchInterval);\n\n        var bounds = _this2.original.getBoundingClientRect();\n\n        var computedStyle = window.getComputedStyle(_this2.original);\n        canvas.style.width = computedStyle.width;\n        canvas.style.height = computedStyle.height;\n        canvas.style.left = computedStyle.left;\n        canvas.style.top = computedStyle.top;\n        canvas.style.transform = computedStyle.transform;\n        canvas.width = w = bounds.width * dpr;\n        canvas.height = h = bounds.height * dpr;\n        scale = img.width / w;\n        glitchInterval = setInterval(function () {\n          clear();\n          setTimeout(glitchImg, randInt(250, 1000));\n        }, 300);\n      };\n\n      var clear = function clear() {\n        context.clearRect(0, 0, w * dpr, h * dpr);\n      };\n\n      var glitchImg = function glitchImg() {\n        for (var i = 0; i < randInt(1, 13); i++) {\n          var x = Math.random() * w * dpr;\n          var y = Math.random() * h * dpr;\n          var spliceWidth = w * dpr - x;\n          var spliceHeight = randInt(5, h * dpr / 3); // context.drawImage(canvas, 0, y, spliceWidth, spliceHeight, x, y, spliceWidth*dpr, spliceHeight*dpr);\n          // context.drawImage(canvas, spliceWidth, y, x, spliceHeight, 0, y, x, spliceHeight*dpr);\n          // WORKING\n          // context.drawImage(img, 0, 200, img.width, 100, 0, 200/scale, w, 100/scale);\n\n          context.drawImage(img, 0, 200, img.width, 100, 0, 200 / scale, w, 100 / scale);\n        }\n      };\n\n      var randInt = function randInt(a, b) {\n        return ~~(Math.random() * (b - a) + a);\n      };\n    }\n  }, {\n    key: "start",\n    value: function start() {}\n  }, {\n    key: "end",\n    value: function end() {}\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nGlitchCanvas_defineProperty(GlitchCanvas_default, "manifest", {\n  id: \'glitch-canvas\',\n  options: {\n    trigger: \'hover\'\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/GlitchEasel.js\nfunction GlitchEasel_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { GlitchEasel_typeof = function _typeof(obj) { return typeof obj; }; } else { GlitchEasel_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return GlitchEasel_typeof(obj); }\n\nfunction GlitchEasel_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction GlitchEasel_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction GlitchEasel_createClass(Constructor, protoProps, staticProps) { if (protoProps) GlitchEasel_defineProperties(Constructor.prototype, protoProps); if (staticProps) GlitchEasel_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction GlitchEasel_possibleConstructorReturn(self, call) { if (call && (GlitchEasel_typeof(call) === "object" || typeof call === "function")) { return call; } return GlitchEasel_assertThisInitialized(self); }\n\nfunction GlitchEasel_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction GlitchEasel_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) GlitchEasel_setPrototypeOf(subClass, superClass); }\n\nfunction GlitchEasel_setPrototypeOf(o, p) { GlitchEasel_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return GlitchEasel_setPrototypeOf(o, p); }\n\nfunction GlitchEasel_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { GlitchEasel_get = Reflect.get; } else { GlitchEasel_get = function _get(target, property, receiver) { var base = GlitchEasel_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return GlitchEasel_get(target, property, receiver || target); }\n\nfunction GlitchEasel_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = GlitchEasel_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction GlitchEasel_getPrototypeOf(o) { GlitchEasel_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return GlitchEasel_getPrototypeOf(o); }\n\nfunction GlitchEasel_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar GlitchEasel_LOG = \'[ FX : GlitchEasel ]\';\nvar GlitchEasel_DEBUG = true;\n\nvar GlitchEasel_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  GlitchEasel_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    GlitchEasel_classCallCheck(this, _default);\n\n    _this = GlitchEasel_possibleConstructorReturn(this, GlitchEasel_getPrototypeOf(_default).apply(this, arguments));\n\n    GlitchEasel_defineProperty(GlitchEasel_assertThisInitialized(_this), "src", void 0);\n\n    GlitchEasel_defineProperty(GlitchEasel_assertThisInitialized(_this), "canvas", void 0);\n\n    GlitchEasel_defineProperty(GlitchEasel_assertThisInitialized(_this), "stage", void 0);\n\n    GlitchEasel_defineProperty(GlitchEasel_assertThisInitialized(_this), "width", void 0);\n\n    GlitchEasel_defineProperty(GlitchEasel_assertThisInitialized(_this), "height", void 0);\n\n    GlitchEasel_defineProperty(GlitchEasel_assertThisInitialized(_this), "dpr", !window.devicePixelRatio ? 1 : window.devicePixelRatio >= 2 ? 2 : 1);\n\n    GlitchEasel_defineProperty(GlitchEasel_assertThisInitialized(_this), "segments", []);\n\n    GlitchEasel_get(GlitchEasel_getPrototypeOf(_default.prototype), "init", GlitchEasel_assertThisInitialized(_this)).call(GlitchEasel_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  GlitchEasel_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      var _this2 = this;\n\n      // Save original image\n      this.original = this.element;\n      this.src = this.original.getAttribute(\'src\'); // Create canvas\n\n      var canvas = this.canvas = document.createElement(\'canvas\');\n      this.original.getAttribute(\'id\') && canvas.setAttribute(\'id\', this.original.getAttribute(\'id\'));\n      this.stage = new createjs.Stage(this.canvas);\n      this.original.parentNode.insertBefore(this.canvas, this.original.nextSibling);\n      this.original.style.opacity = 0;\n      this.original.style.pointerEvents = \'none\';\n      var computedStyle = window.getComputedStyle(this.original);\n      canvas.style.width = computedStyle.width;\n      canvas.style.height = computedStyle.height;\n      canvas.style.left = computedStyle.left;\n      canvas.style.top = computedStyle.top;\n      canvas.style.transform = computedStyle.transform; // canvas.style.pointerEvents = \'none\';\n\n      this.width = parseInt(computedStyle.width) * this.dpr;\n      this.height = parseInt(computedStyle.height) * this.dpr; // let rect = canvas.getBoundingClientRect();\n      // canvas.width = rect.width * this.dpr;\n      // canvas.height = rect.height * this.dpr;\n      // canvas.getContext(\'2d\').scale(this.dpr, this.dpr);\n\n      canvas.width = canvas.clientWidth * this.dpr;\n      canvas.height = canvas.clientHeight * this.dpr;\n      canvas.getContext(\'2d\').scale(this.dpr, this.dpr);\n      this.element = this.canvas; // this.original.parentNode.removeChild(this.original);\n      // this.original.remove();\n\n      this.original.removeAttribute(\'id\'); // Create segments\n\n      var seedIndex = 0,\n          top = 0;\n\n      while (true) {\n        var seed = Math.round(this.options.seed[seedIndex] * this.options.factor);\n        var image = new createjs.Bitmap(this.src);\n        var shape = new createjs.Shape();\n        shape.graphics.beginFill("#FFFFFF").drawRect(0, top, this.width, seed);\n        image.mask = shape;\n        this.stage.addChild(image);\n        this.segments.push(image); // End\n\n        if (top >= parseInt(computedStyle.height) * this.dpr) break; // Iterate \n\n        top += seed;\n        seedIndex = seedIndex >= this.options.seed.length - 1 ? 0 : ++seedIndex;\n      } // Timeline\n\n\n      this.timeline = gsap.timeline({\n        paused: true,\n        delay: this.options.delay / 1000,\n        repeat: this.options.repeat,\n        repeatDelay: this.options.repeatDelay / 1000,\n        yoyo: this.options.yoyo,\n        onUpdate: this.stage.update.bind(this.stage)\n      });\n      this.segments.forEach(function (segment, index) {\n        _this2.timeline.from(segment, {\n          x: (Math.random() - .5) * 20 * _this2.options.power,\n          alpha: 0,\n          duration: 0.5,\n          ease: _this2.options.easeing\n        }, "".concat(index * _this2.options.stagger / 1000));\n      });\n      this.timeline.timeScale(this.timeline.duration() / (this.options.duration / 1000));\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      this.timeline.play();\n    }\n  }, {\n    key: "end",\n    value: function end() {\n      this.timeline.reverse();\n    }\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nGlitchEasel_defineProperty(GlitchEasel_default, "manifest", {\n  id: \'glitch-easel\',\n  options: {\n    trigger: \'hover\',\n    duration: 1000,\n    delay: 0,\n    repeat: 0,\n    repeatDelay: 1000,\n    yoyo: true,\n    seed: [1, 6, 3, 1, 3, 8, 2, 1, 9, 4, 7, 1],\n    factor: 10,\n    power: 80,\n    stagger: 10,\n    easing: \'power4.inOut\' // back.out(3),\n\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/GlitchAppear.js\nfunction GlitchAppear_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { GlitchAppear_typeof = function _typeof(obj) { return typeof obj; }; } else { GlitchAppear_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return GlitchAppear_typeof(obj); }\n\nfunction GlitchAppear_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction GlitchAppear_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction GlitchAppear_createClass(Constructor, protoProps, staticProps) { if (protoProps) GlitchAppear_defineProperties(Constructor.prototype, protoProps); if (staticProps) GlitchAppear_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction GlitchAppear_possibleConstructorReturn(self, call) { if (call && (GlitchAppear_typeof(call) === "object" || typeof call === "function")) { return call; } return GlitchAppear_assertThisInitialized(self); }\n\nfunction GlitchAppear_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction GlitchAppear_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) GlitchAppear_setPrototypeOf(subClass, superClass); }\n\nfunction GlitchAppear_setPrototypeOf(o, p) { GlitchAppear_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return GlitchAppear_setPrototypeOf(o, p); }\n\nfunction GlitchAppear_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { GlitchAppear_get = Reflect.get; } else { GlitchAppear_get = function _get(target, property, receiver) { var base = GlitchAppear_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return GlitchAppear_get(target, property, receiver || target); }\n\nfunction GlitchAppear_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = GlitchAppear_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction GlitchAppear_getPrototypeOf(o) { GlitchAppear_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return GlitchAppear_getPrototypeOf(o); }\n\nfunction GlitchAppear_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar GlitchAppear_LOG = \'[ FX : GlitchAppear ]\';\nvar GlitchAppear_DEBUG = true;\n\nvar GlitchAppear_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  GlitchAppear_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    GlitchAppear_classCallCheck(this, _default);\n\n    _this = GlitchAppear_possibleConstructorReturn(this, GlitchAppear_getPrototypeOf(_default).apply(this, arguments));\n    _this.original;\n    _this.computedStyle;\n\n    GlitchAppear_get(GlitchAppear_getPrototypeOf(_default.prototype), "init", GlitchAppear_assertThisInitialized(_this)).call(GlitchAppear_assertThisInitialized(_this)); // super.start();\n\n\n    return _this;\n  }\n\n  GlitchAppear_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      GlitchAppear_DEBUG && console.log(GlitchAppear_LOG, \'init()\', this.options); // Prepare elements\n\n      this.original = this.element;\n      var computedStyle = this.computedStyle = window.getComputedStyle(this.original); // Wrap everything in div\n\n      this.element = document.createElement(\'div\');\n      this.element.style.position = computedStyle.position;\n      this.element.style.width = computedStyle.width;\n      this.element.style.height = computedStyle.height;\n      this.element.style.top = computedStyle.top;\n      this.element.style.left = computedStyle.left; // this.element.style.backgroundColor = \'#BADA55\';\n\n      this.element.style.overflow = \'hidden\';\n      this.element.setAttribute(\'mojo-fx-glitch\', this.original.getAttribute(\'mojo-fx-glitch\'));\n      this.original.removeAttribute(\'mojo-fx-glitch\');\n      this.original.parentNode.insertBefore(this.element, this.original);\n      this.element.appendChild(this.original); // Wrap original in div (for masking etc.)\n\n      var layerWrapper = document.createElement(\'div\');\n      this.original.parentNode.insertBefore(layerWrapper, this.original);\n      layerWrapper.appendChild(this.original);\n      this.original = layerWrapper; // Generate Elements\n\n      this.generateElements();\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      GlitchAppear_DEBUG && console.log(GlitchAppear_LOG, \'start()\');\n      var glitched = this.element.querySelectorAll(\'.glitched\');\n      gsap.set(this.original, {\n        opacity: 0\n      });\n      gsap.set(glitched, {\n        opacity: 0\n      });\n      var tl = gsap.timeline({\n        delay: this.options.delay / 1000\n      });\n      glitched.forEach(function (item, index) {\n        // let power = 20;\n        var power = 30;\n        var layerTl = gsap.timeline();\n        layerTl.to(item, {\n          duration: 0.04,\n          opacity: 0.2,\n          x: (Math.random() - 0.5) * power\n        }, "+=0.02");\n        layerTl.to(item, {\n          duration: 0.04,\n          opacity: 0.4,\n          x: 0\n        }, "+=0.02");\n        layerTl.to(item, {\n          duration: 0.04,\n          opacity: 0.6,\n          x: (Math.random() - 0.5) * power\n        }, "+=0");\n        layerTl.to(item, {\n          duration: 0.04,\n          opacity: 0.8,\n          x: 0\n        }, "+=0.02");\n        layerTl.to({}, {\n          duration: 0.02\n        });\n        layerTl.to(item, {\n          duration: 0.04,\n          opacity: 1,\n          x: (Math.random() - 0.5) * power\n        }, "+=0"); // layerTl.to(item, {duration: 0.04, opacity: 1, x: 0}, `+=0.02`);\n        // layerTl.to(item, {duration: 0.04, opacity: 1, x: (Math.random()-0.5)*power}, `+=0.02`);\n\n        layerTl.to(item, {\n          duration: 0.04,\n          opacity: 1,\n          x: 0\n        }, "+=0.02");\n        tl.add(layerTl, index / 10); // tl.add( layerTl, 0.5 );\n      }); // tl.to(this.original, {duration: 0.2, opacity: 1}, .5);\n    }\n  }, {\n    key: "end",\n    value: function end() {}\n    /**\n     * Generate elements\n     */\n\n  }, {\n    key: "generateElements",\n    value: function generateElements() {\n      // console.log(this.computedStyle.width);\n      for (var i = 0; i < 10; i++) {\n        var clone = this.original.cloneNode(true);\n        clone.classList.add(\'glitched\');\n        clone.style.position = \'absolute\';\n        clone.style.top = "".concat(i * 60, "px");\n        clone.style.left = 0;\n        clone.style.width = this.computedStyle.width; // clone.style.height = \'30px\';\n\n        clone.style.height = "".concat(5 + Math.random() * 80, "px"); // clone.style.filter = \'grayscale(10%)\';\n        // clone.style.filter = `brightness(1.04)`;\n\n        clone.style.overflow = \'hidden\';\n        var child = clone.firstChild;\n        child.style.position = \'absolute\';\n        child.style.top = "".concat(i * -60, "px");\n        child.style.left = \'0px\';\n        this.element.appendChild(clone);\n      }\n    }\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nGlitchAppear_defineProperty(GlitchAppear_default, "manifest", {\n  id: \'GlitchAppear\',\n  options: {\n    delay: 0\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/GlitchBase.js\nfunction GlitchBase_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { GlitchBase_typeof = function _typeof(obj) { return typeof obj; }; } else { GlitchBase_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return GlitchBase_typeof(obj); }\n\nfunction GlitchBase_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction GlitchBase_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction GlitchBase_createClass(Constructor, protoProps, staticProps) { if (protoProps) GlitchBase_defineProperties(Constructor.prototype, protoProps); if (staticProps) GlitchBase_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction GlitchBase_possibleConstructorReturn(self, call) { if (call && (GlitchBase_typeof(call) === "object" || typeof call === "function")) { return call; } return GlitchBase_assertThisInitialized(self); }\n\nfunction GlitchBase_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction GlitchBase_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) GlitchBase_setPrototypeOf(subClass, superClass); }\n\nfunction GlitchBase_setPrototypeOf(o, p) { GlitchBase_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return GlitchBase_setPrototypeOf(o, p); }\n\nfunction GlitchBase_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { GlitchBase_get = Reflect.get; } else { GlitchBase_get = function _get(target, property, receiver) { var base = GlitchBase_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return GlitchBase_get(target, property, receiver || target); }\n\nfunction GlitchBase_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = GlitchBase_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction GlitchBase_getPrototypeOf(o) { GlitchBase_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return GlitchBase_getPrototypeOf(o); }\n\nfunction GlitchBase_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar GlitchBase_LOG = \'[ FX : GlitchBase ]\';\nvar GlitchBase_DEBUG = true;\n\nvar GlitchBase_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  GlitchBase_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    GlitchBase_classCallCheck(this, _default);\n\n    _this = GlitchBase_possibleConstructorReturn(this, GlitchBase_getPrototypeOf(_default).apply(this, arguments));\n    _this.original;\n    _this.computedStyle;\n    _this.segments = [];\n\n    GlitchBase_get(GlitchBase_getPrototypeOf(_default.prototype), "init", GlitchBase_assertThisInitialized(_this)).call(GlitchBase_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  GlitchBase_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      GlitchBase_DEBUG && console.log(GlitchBase_LOG, \'init()\', this.options); // Prepare elements\n\n      this.original = this.element;\n      var computedStyle = this.computedStyle = window.getComputedStyle(this.original); // Wrap everything in div\n\n      this.element = document.createElement(\'div\');\n      this.element.style.position = computedStyle.position;\n      this.element.style.width = computedStyle.width;\n      this.element.style.height = computedStyle.height; // Ignore transforms\n\n      this.element.style.top = computedStyle.top;\n      this.element.style.left = computedStyle.left;\n      this.element.style.transform = computedStyle.transform; // Incorporate transforms\n      // console.log(\'bound\', bound);\n      // this.element.style.top = bound.top+\'px\';\n      // this.element.style.left = bound.left+\'px\';\n      // this.element.style.backgroundColor = \'#BADA55\';\n      // this.element.style.overflow = \'hidden\';\n\n      this.element.setAttribute(\'mojo-fx-glitch\', this.original.getAttribute(\'mojo-fx-glitch\'));\n      this.original.removeAttribute(\'mojo-fx-glitch\');\n      this.original.style.pointerEvents = \'none\';\n      this.original.parentNode.insertBefore(this.element, this.original);\n      this.element.appendChild(this.original); // Wrap original in div (for masking etc.)\n\n      var layerWrapper = document.createElement(\'div\');\n      layerWrapper.style.pointerEvents = \'none\';\n      this.original.parentNode.insertBefore(layerWrapper, this.original);\n      layerWrapper.appendChild(this.original);\n      this.original = layerWrapper; // Generate Elements\n\n      this.generateElements();\n      console.log(GlitchBase_LOG, \'generated\');\n    }\n  }, {\n    key: "start",\n    value: function start() {}\n  }, {\n    key: "end",\n    value: function end() {}\n    /**\n     * Generate elements\n     */\n\n  }, {\n    key: "generateElements",\n    value: function generateElements() {\n      // console.log(this.computedStyle.width);\n      var seedIndex = 0,\n          top = 0,\n          i = 0;\n\n      while (true) {\n        var seed = this.options.seed[seedIndex] * this.options.factor;\n        var clone = this.original.cloneNode(true);\n        clone.classList.add(\'glitched\');\n        clone.style.position = \'absolute\';\n        clone.style.top = "".concat(top, "px");\n        clone.style.left = \'0px\';\n        clone.style.width = this.computedStyle.width; // clone.style.backgroundColor = \'DeepPink\';\n\n        clone.style.height = "".concat(seed, "px"); // clone.style.filter = \'grayscale(100%)\';\n        // clone.style.filter = `brightness(1.04)`;\n\n        clone.style.overflow = \'hidden\';\n        clone.style.pointerEvents = \'none\';\n        var child = clone.firstChild;\n        child.style.position = \'absolute\';\n        child.style.top = "-".concat(top, "px");\n        child.style.left = \'0px\';\n        child.style.transform = \'none\';\n        child.style.pointerEvents = \'none\';\n        this.segments.push(clone);\n        this.element.appendChild(clone); // End\n\n        if (top >= parseInt(this.computedStyle.height)) break; // Iterate\n        // top += seed;\n\n        top += seed - 1; // Note: We need 1px overlapping to prevent white lines when scaling (rounding issue)\n\n        seedIndex = seedIndex >= this.options.seed.length - 1 ? 0 : ++seedIndex;\n        i++;\n      }\n    }\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nGlitchBase_defineProperty(GlitchBase_default, "manifest", {\n  id: \'glitch-base\',\n  options: {\n    delay: 0,\n    seed: [1, 6, 3, 1, 3, 8, 2, 1, 9, 4, 7, 1],\n    factor: 20\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/GlitchInOut.js\nfunction GlitchInOut_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { GlitchInOut_typeof = function _typeof(obj) { return typeof obj; }; } else { GlitchInOut_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return GlitchInOut_typeof(obj); }\n\nfunction GlitchInOut_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction GlitchInOut_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction GlitchInOut_createClass(Constructor, protoProps, staticProps) { if (protoProps) GlitchInOut_defineProperties(Constructor.prototype, protoProps); if (staticProps) GlitchInOut_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction GlitchInOut_possibleConstructorReturn(self, call) { if (call && (GlitchInOut_typeof(call) === "object" || typeof call === "function")) { return call; } return GlitchInOut_assertThisInitialized(self); }\n\nfunction GlitchInOut_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction GlitchInOut_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) GlitchInOut_setPrototypeOf(subClass, superClass); }\n\nfunction GlitchInOut_setPrototypeOf(o, p) { GlitchInOut_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return GlitchInOut_setPrototypeOf(o, p); }\n\nfunction GlitchInOut_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nfunction GlitchInOut_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { GlitchInOut_get = Reflect.get; } else { GlitchInOut_get = function _get(target, property, receiver) { var base = GlitchInOut_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return GlitchInOut_get(target, property, receiver || target); }\n\nfunction GlitchInOut_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = GlitchInOut_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction GlitchInOut_getPrototypeOf(o) { GlitchInOut_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return GlitchInOut_getPrototypeOf(o); }\n\n// Experimental Effect\n\nvar GlitchInOut_LOG = \'[ FX : GlitchInOut ]\';\nvar GlitchInOut_DEBUG = false;\n\nvar GlitchInOut_default =\n/*#__PURE__*/\nfunction (_GlitchBase) {\n  GlitchInOut_inherits(_default, _GlitchBase);\n\n  function _default() {\n    var _this;\n\n    GlitchInOut_classCallCheck(this, _default);\n\n    _this = GlitchInOut_possibleConstructorReturn(this, GlitchInOut_getPrototypeOf(_default).apply(this, arguments));\n    _this.timeline;\n    return _this;\n  }\n\n  GlitchInOut_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      var _this2 = this;\n\n      GlitchInOut_get(GlitchInOut_getPrototypeOf(_default.prototype), "init", this).call(this);\n\n      GlitchInOut_DEBUG && console.log(GlitchInOut_LOG, \'init()\', this.options);\n      this.original.style.opacity = 0;\n      this.timeline = gsap.timeline({\n        paused: true,\n        delay: this.options.delay / 1000\n      });\n      this.segments.forEach(function (item, index) {\n        item.style.opacity = 0;\n        gsap.set(item, {\n          x: (Math.random() - .5) * 20 * _this2.options.power,\n          force3D: true\n        });\n\n        _this2.timeline.to(item, {\n          duration: 0.4,\n          x: 0,\n          opacity: 1,\n          ease: \'Power4.inOut\',\n          force3D: true\n        }, 0);\n      });\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      GlitchInOut_DEBUG && console.log(GlitchInOut_LOG, \'start()\');\n      this.timeline.play(); // setTimeout(()=>{\n      //   this.timeline.reverse()\n      // }, this.options.delay+1900);\n    }\n  }, {\n    key: "end",\n    value: function end() {\n      GlitchInOut_DEBUG && console.log(GlitchInOut_LOG, \'end()\');\n      this.timeline.reverse();\n    }\n  }]);\n\n  return _default;\n}(GlitchBase_default);\n\nGlitchInOut_defineProperty(GlitchInOut_default, "manifest", {\n  id: \'glitch-in-out\',\n  options: Object.assign({}, GlitchInOut_get(GlitchInOut_getPrototypeOf(GlitchInOut_default), "manifest", GlitchInOut_default).options, {\n    trigger: \'auto\',\n    delay: 0,\n    seed: [1, 6, 3, 1, 3, 8, 2, 1, 9, 4, 7, 1],\n    factor: 20,\n    power: 40\n  })\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/Remove.js\nfunction Remove_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Remove_typeof = function _typeof(obj) { return typeof obj; }; } else { Remove_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Remove_typeof(obj); }\n\nfunction Remove_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Remove_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Remove_createClass(Constructor, protoProps, staticProps) { if (protoProps) Remove_defineProperties(Constructor.prototype, protoProps); if (staticProps) Remove_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Remove_possibleConstructorReturn(self, call) { if (call && (Remove_typeof(call) === "object" || typeof call === "function")) { return call; } return Remove_assertThisInitialized(self); }\n\nfunction Remove_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Remove_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Remove_setPrototypeOf(subClass, superClass); }\n\nfunction Remove_setPrototypeOf(o, p) { Remove_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Remove_setPrototypeOf(o, p); }\n\nfunction Remove_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { Remove_get = Reflect.get; } else { Remove_get = function _get(target, property, receiver) { var base = Remove_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return Remove_get(target, property, receiver || target); }\n\nfunction Remove_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Remove_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Remove_getPrototypeOf(o) { Remove_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Remove_getPrototypeOf(o); }\n\nfunction Remove_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar Remove_LOG = \'[ FX : Remove ]\';\nvar Remove_DEBUG = true;\n\nvar Remove_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  Remove_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    Remove_classCallCheck(this, _default);\n\n    _this = Remove_possibleConstructorReturn(this, Remove_getPrototypeOf(_default).apply(this, arguments));\n\n    Remove_get(Remove_getPrototypeOf(_default.prototype), "init", Remove_assertThisInitialized(_this)).call(Remove_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  Remove_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      Remove_DEBUG && console.log(Remove_LOG, \'options:\', this.options);\n      this.element.parentElement.removeChild(this.element);\n    }\n  }, {\n    key: "start",\n    value: function start() {}\n  }, {\n    key: "end",\n    value: function end() {}\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nRemove_defineProperty(Remove_default, "manifest", {\n  id: \'remove\',\n  options: {\n    trigger: \'auto\'\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/Fade.js\nfunction Fade_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Fade_typeof = function _typeof(obj) { return typeof obj; }; } else { Fade_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Fade_typeof(obj); }\n\nfunction Fade_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Fade_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Fade_createClass(Constructor, protoProps, staticProps) { if (protoProps) Fade_defineProperties(Constructor.prototype, protoProps); if (staticProps) Fade_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Fade_possibleConstructorReturn(self, call) { if (call && (Fade_typeof(call) === "object" || typeof call === "function")) { return call; } return Fade_assertThisInitialized(self); }\n\nfunction Fade_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Fade_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Fade_setPrototypeOf(subClass, superClass); }\n\nfunction Fade_setPrototypeOf(o, p) { Fade_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Fade_setPrototypeOf(o, p); }\n\nfunction Fade_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { Fade_get = Reflect.get; } else { Fade_get = function _get(target, property, receiver) { var base = Fade_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return Fade_get(target, property, receiver || target); }\n\nfunction Fade_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Fade_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Fade_getPrototypeOf(o) { Fade_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Fade_getPrototypeOf(o); }\n\nfunction Fade_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar Fade_LOG = \'[ FX : Fade ]\';\nvar Fade_DEBUG = true;\n\nvar Fade_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  Fade_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    Fade_classCallCheck(this, _default);\n\n    _this = Fade_possibleConstructorReturn(this, Fade_getPrototypeOf(_default).apply(this, arguments));\n\n    Fade_get(Fade_getPrototypeOf(_default.prototype), "init", Fade_assertThisInitialized(_this)).call(Fade_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  Fade_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      Fade_DEBUG && console.log(Fade_LOG, \'init()\', this.options); //this.timeline = gsap.timeline({paused: true});\n\n      gsap.set(this.element, {\n        opacity: 0\n      });\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      Fade_DEBUG && console.log(Fade_LOG, \'start()\');\n      gsap.to(this.element, {\n        delay: this.options.delay / 1000,\n        opacity: 1\n      });\n    }\n  }, {\n    key: "end",\n    value: function end() {\n      Fade_DEBUG && console.log(Fade_LOG, \'end()\');\n      gsap.to(this.element, {\n        delay: this.options.delay / 1000,\n        opacity: 0\n      });\n    }\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nFade_defineProperty(Fade_default, "manifest", {\n  id: \'fade\',\n  options: {\n    trigger: \'auto\',\n    delay: 100\n  }\n});\n\n\n// CONCATENATED MODULE: ./src/mojo/fx/experimental/PanZoom.js\nfunction PanZoom_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { PanZoom_typeof = function _typeof(obj) { return typeof obj; }; } else { PanZoom_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return PanZoom_typeof(obj); }\n\nfunction PanZoom_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction PanZoom_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction PanZoom_createClass(Constructor, protoProps, staticProps) { if (protoProps) PanZoom_defineProperties(Constructor.prototype, protoProps); if (staticProps) PanZoom_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction PanZoom_possibleConstructorReturn(self, call) { if (call && (PanZoom_typeof(call) === "object" || typeof call === "function")) { return call; } return PanZoom_assertThisInitialized(self); }\n\nfunction PanZoom_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction PanZoom_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) PanZoom_setPrototypeOf(subClass, superClass); }\n\nfunction PanZoom_setPrototypeOf(o, p) { PanZoom_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return PanZoom_setPrototypeOf(o, p); }\n\nfunction PanZoom_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { PanZoom_get = Reflect.get; } else { PanZoom_get = function _get(target, property, receiver) { var base = PanZoom_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return PanZoom_get(target, property, receiver || target); }\n\nfunction PanZoom_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = PanZoom_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction PanZoom_getPrototypeOf(o) { PanZoom_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return PanZoom_getPrototypeOf(o); }\n\nfunction PanZoom_defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Experimental Effect\n\nvar PanZoom_LOG = \'[ FX : PanZoom ]\';\nvar PanZoom_DEBUG = true;\n\nvar PanZoom_default =\n/*#__PURE__*/\nfunction (_FxBase) {\n  PanZoom_inherits(_default, _FxBase);\n\n  function _default() {\n    var _this;\n\n    PanZoom_classCallCheck(this, _default);\n\n    _this = PanZoom_possibleConstructorReturn(this, PanZoom_getPrototypeOf(_default).apply(this, arguments));\n\n    PanZoom_get(PanZoom_getPrototypeOf(_default.prototype), "init", PanZoom_assertThisInitialized(_this)).call(PanZoom_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  PanZoom_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      var _this2 = this;\n\n      console.log(PanZoom_LOG, \'options:\', this.options); // TEMP: XD HACK\n\n      this.element.parentNode.style.overflow = \'hidden\'; // Get stops\n\n      var stopElements = this.element.querySelectorAll(\'[mojo-fx-panzoom-stop]\');\n      PanZoom_DEBUG && console.log(PanZoom_LOG, \'stopElements:\', stopElements); // Process stops\n\n      this.stops = [];\n      stopElements.forEach(function (item) {\n        var options = item.getAttribute(\'mojo-fx-panzoom-stop\');\n        options = mojo.fx.FxScanner.extractOptions(options);\n        options = Object.assign({\n          delay: 3000\n        }, options);\n        var stop = {\n          el: item,\n          scale: _this2.element.offsetWidth / item.offsetWidth,\n          left: parseInt(window.getComputedStyle(item).transform.split(\'(\')[1].split(\',\')[4]),\n          top: parseInt(window.getComputedStyle(item).transform.split(\'(\')[1].split(\',\')[5]),\n          options: options\n        };\n\n        _this2.stops.push(stop);\n\n        item.style.opacity = 0;\n        item.style.pointerEvents = \'none\';\n      });\n      PanZoom_DEBUG && console.log(PanZoom_LOG, \'stops:\', this.stops); // Timeline\n\n      this.timeline = gsap.timeline({\n        paused: true\n      });\n      this.stops.forEach(function (item, index) {\n        _this2.timeline.to(_this2.element, {\n          scale: item.scale,\n          x: -item.left * item.scale,\n          y: -item.top * item.scale,\n          transformOrigin: \'0 0\',\n          delay: index > 0 && _this2.stops[index - 1].options.stop ? 0 : item.options.delay / 1000,\n          duration: 1.8,\n          ease: \'power4.inOut\',\n          force3D: true\n        });\n\n        item.options.stop && _this2.timeline.add(function () {\n          _this2.timeline.pause();\n\n          _this2.element.addEventListener(\'click\', function () {\n            _this2.timeline.play();\n          }, {\n            once: true\n          });\n        });\n      });\n    }\n  }, {\n    key: "start",\n    value: function start() {\n      this.timeline.play();\n    }\n  }, {\n    key: "end",\n    value: function end() {}\n  }]);\n\n  return _default;\n}(FxBase["a" /* default */]);\n\nPanZoom_defineProperty(PanZoom_default, "manifest", {\n  id: \'panzoom\',\n  options: {\n    trigger: \'auto\'\n  }\n});\n\n\n// EXTERNAL MODULE: ./libs/nanoevents.js\nvar nanoevents = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/fusion/plugins/PluginBase.js\nfunction PluginBase_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { PluginBase_typeof = function _typeof(obj) { return typeof obj; }; } else { PluginBase_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return PluginBase_typeof(obj); }\n\nfunction PluginBase_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction PluginBase_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction PluginBase_createClass(Constructor, protoProps, staticProps) { if (protoProps) PluginBase_defineProperties(Constructor.prototype, protoProps); if (staticProps) PluginBase_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction PluginBase_possibleConstructorReturn(self, call) { if (call && (PluginBase_typeof(call) === "object" || typeof call === "function")) { return call; } return PluginBase_assertThisInitialized(self); }\n\nfunction PluginBase_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction PluginBase_getPrototypeOf(o) { PluginBase_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return PluginBase_getPrototypeOf(o); }\n\nfunction PluginBase_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) PluginBase_setPrototypeOf(subClass, superClass); }\n\nfunction PluginBase_setPrototypeOf(o, p) { PluginBase_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return PluginBase_setPrototypeOf(o, p); }\n\n\nvar PluginBase_LOG = \'[ PluginBase ]\';\nvar PluginBase_DEBUG = true;\n\nvar PluginBase_default =\n/*#__PURE__*/\nfunction (_NanoEvents) {\n  PluginBase_inherits(_default, _NanoEvents);\n\n  function _default(scene, options) {\n    var _this;\n\n    PluginBase_classCallCheck(this, _default);\n\n    _this = PluginBase_possibleConstructorReturn(this, PluginBase_getPrototypeOf(_default).call(this));\n    _this.scene = scene;\n    _this.player = scene.player;\n    _this.options = options;\n    return _this;\n  }\n\n  PluginBase_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      this.options = Object.assign(this.manifest.options, this.options);\n      this.init();\n    }\n  }]);\n\n  return _default;\n}(nanoevents["a" /* default */]);\n\n\n// EXTERNAL MODULE: ./src/fusion/Const.js\nvar Const = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/fusion/plugins/wip/VisualDebugger.js\nfunction VisualDebugger_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { VisualDebugger_typeof = function _typeof(obj) { return typeof obj; }; } else { VisualDebugger_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return VisualDebugger_typeof(obj); }\n\nfunction VisualDebugger_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction VisualDebugger_possibleConstructorReturn(self, call) { if (call && (VisualDebugger_typeof(call) === "object" || typeof call === "function")) { return call; } return VisualDebugger_assertThisInitialized(self); }\n\nfunction VisualDebugger_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction VisualDebugger_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction VisualDebugger_createClass(Constructor, protoProps, staticProps) { if (protoProps) VisualDebugger_defineProperties(Constructor.prototype, protoProps); if (staticProps) VisualDebugger_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction VisualDebugger_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) VisualDebugger_setPrototypeOf(subClass, superClass); }\n\nfunction VisualDebugger_setPrototypeOf(o, p) { VisualDebugger_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return VisualDebugger_setPrototypeOf(o, p); }\n\nfunction VisualDebugger_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { VisualDebugger_get = Reflect.get; } else { VisualDebugger_get = function _get(target, property, receiver) { var base = VisualDebugger_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return VisualDebugger_get(target, property, receiver || target); }\n\nfunction VisualDebugger_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = VisualDebugger_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction VisualDebugger_getPrototypeOf(o) { VisualDebugger_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return VisualDebugger_getPrototypeOf(o); }\n\n// Experimental Plugin\n\n\nvar VisualDebugger_LOG = \'[ Plugin : VisualDebugger ]\';\nvar VisualDebugger_DEBUG = false;\n\nvar VisualDebugger_default =\n/*#__PURE__*/\nfunction (_PluginBase) {\n  VisualDebugger_inherits(_default, _PluginBase);\n\n  VisualDebugger_createClass(_default, null, [{\n    key: "manifest",\n    value: function manifest() {\n      return {\n        id: \'visualDebugger\',\n        options: {}\n      };\n    }\n  }]);\n\n  function _default() {\n    var _this;\n\n    VisualDebugger_classCallCheck(this, _default);\n\n    _this = VisualDebugger_possibleConstructorReturn(this, VisualDebugger_getPrototypeOf(_default).apply(this, arguments));\n    _this.manifest = _this.constructor.manifest();\n\n    VisualDebugger_get(VisualDebugger_getPrototypeOf(_default.prototype), "init", VisualDebugger_assertThisInitialized(_this)).call(VisualDebugger_assertThisInitialized(_this));\n\n    return _this;\n  }\n\n  VisualDebugger_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      VisualDebugger_DEBUG && console.log(VisualDebugger_LOG, \'init()\');\n      this.scene.on(Const["a" /* default */].SCENE_PRE_READY, this.on_scene_preReady.bind(this));\n      this.scene.on(Const["a" /* default */].SCENE_READY, this.on_scene_ready.bind(this));\n    }\n    /**\n     * on_scene_preReady\n     */\n\n  }, {\n    key: "on_scene_preReady",\n    value: function on_scene_preReady() {}\n    /**\n     * on_scene_ready\n     */\n\n  }, {\n    key: "on_scene_ready",\n    value: function on_scene_ready() {\n      var clone = this.scene.content.cloneNode(false);\n      clone.setAttribute(\'style\', this.scene.content.getAttribute(\'style\'));\n      clone.style.border = \'1px solid rgba(0,0,0,.2)\';\n      clone.style.boxSizing = \'border-box\';\n      clone.style.pointerEvents = \'none\';\n      this.scene.content.parentNode.appendChild(clone);\n    }\n  }]);\n\n  return _default;\n}(PluginBase_default);\n\n\n// CONCATENATED MODULE: ./src/fusion/plugins/wip/Panorama.js\nfunction Panorama_typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { Panorama_typeof = function _typeof(obj) { return typeof obj; }; } else { Panorama_typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return Panorama_typeof(obj); }\n\nfunction Panorama_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }\n\nfunction Panorama_possibleConstructorReturn(self, call) { if (call && (Panorama_typeof(call) === "object" || typeof call === "function")) { return call; } return Panorama_assertThisInitialized(self); }\n\nfunction Panorama_assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn\'t been initialised - super() hasn\'t been called"); } return self; }\n\nfunction Panorama_defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction Panorama_createClass(Constructor, protoProps, staticProps) { if (protoProps) Panorama_defineProperties(Constructor.prototype, protoProps); if (staticProps) Panorama_defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction Panorama_inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) Panorama_setPrototypeOf(subClass, superClass); }\n\nfunction Panorama_setPrototypeOf(o, p) { Panorama_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return Panorama_setPrototypeOf(o, p); }\n\nfunction Panorama_get(target, property, receiver) { if (typeof Reflect !== "undefined" && Reflect.get) { Panorama_get = Reflect.get; } else { Panorama_get = function _get(target, property, receiver) { var base = Panorama_superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return Panorama_get(target, property, receiver || target); }\n\nfunction Panorama_superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = Panorama_getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction Panorama_getPrototypeOf(o) { Panorama_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return Panorama_getPrototypeOf(o); }\n\n// Experimental Plugin\n\n\nvar Panorama_LOG = \'[ Plugin : Panorama ]\';\nvar Panorama_DEBUG = true;\n\nvar Panorama_default =\n/*#__PURE__*/\nfunction (_PluginBase) {\n  Panorama_inherits(_default, _PluginBase);\n\n  Panorama_createClass(_default, null, [{\n    key: "manifest",\n    value: function manifest() {\n      return {\n        id: \'panorama\',\n        options: {\n          speed: 1\n        }\n      };\n    }\n  }]);\n\n  function _default() {\n    var _this;\n\n    Panorama_classCallCheck(this, _default);\n\n    _this = Panorama_possibleConstructorReturn(this, Panorama_getPrototypeOf(_default).apply(this, arguments));\n    _this.manifest = _this.constructor.manifest();\n\n    Panorama_get(Panorama_getPrototypeOf(_default.prototype), "init", Panorama_assertThisInitialized(_this)).call(Panorama_assertThisInitialized(_this));\n\n    _this.mouseX;\n    _this.lastScrollTo = 0;\n    return _this;\n  }\n\n  Panorama_createClass(_default, [{\n    key: "init",\n    value: function init() {\n      Panorama_DEBUG && console.log(Panorama_LOG, \'init()\');\n      this.scene.on(Const["a" /* default */].SCENE_PRE_READY, this.on_scene_preReady.bind(this));\n      this.scene.on(Const["a" /* default */].SCENE_READY, this.on_scene_ready.bind(this));\n    }\n    /**\n     * on_scene_preReady\n     */\n\n  }, {\n    key: "on_scene_preReady",\n    value: function on_scene_preReady() {\n      // Prepare scene\n      this.scene.element.style.overflowX = \'scroll\';\n      this.scene.content.style.overflow = \'unset\'; // // Tweak content container to get real width\n      // // scene.content.style.width = \'auto\';\n      // scene.content.style.right = \'unset\';\n      // // Prevent history back when scrolling to left on viewport\n      // // #TODO: Not preventing in Edge\n      // scene.element.addEventListener(\'mousewheel\', function(evt) {\n      //   if (evt.currentTarget.scrollLeft <= 0 && evt.deltaX < 0)  evt.preventDefault();\n      // }, {passive: false});\n      // #TODO: DECIDE ON THROTTLE\n\n      this.scene.element.addEventListener(\'mousemove\', mojo.FusionHelper.throttle(this.on_scene_mouseMove.bind(this), 50)); // 20fps\n\n      this.scene.element.addEventListener(\'click\', this.on_scene_click.bind(this));\n    }\n    /**\n     * on_scene_ready\n     */\n\n  }, {\n    key: "on_scene_ready",\n    value: function on_scene_ready() {\n      Panorama_DEBUG && console.log(Panorama_LOG, \'on_scene_ready()\');\n    }\n    /**\n     * on_scene_mouseMove\n     */\n\n  }, {\n    key: "on_scene_mouseMove",\n    value: function on_scene_mouseMove(evt) {\n      this.mouseX = evt.clientX - this.scene.element.getBoundingClientRect().left;\n    }\n    /**\n     * on_scene_click\n     */\n\n  }, {\n    key: "on_scene_click",\n    value: function on_scene_click(evt) {\n      // Bail if mouse is on interactive elements\n      if (evt.target.hasAttribute(\'mojo-interactive\')) return; // Bail if already moving/scrolling\n\n      if (gsap.isTweening(this.scene.element)) return;\n      var scene = this.scene; // Determine direction\n\n      var minScrollTo = 0;\n      var maxScrollTo = Math.round(scene.content.scrollWidth * scene.scale - scene.element.clientWidth);\n      var dir = this.mouseX - scene.element.clientWidth / 2 > 0 ? \'right\' : \'left\';\n      dir = scene.element.scrollLeft <= minScrollTo ? \'right\' : dir;\n      dir = scene.element.scrollLeft >= maxScrollTo ? \'left\' : dir;\n      Panorama_DEBUG && console.log(Panorama_LOG, \'dir:\', dir); //---\n      // step = scene width\n      // var currentIndex = Math.round(scene.element.scrollLeft/(scene.data.width * scene.scale));\n      // var scrollTo = ((dir==\'left\') ? currentIndex-1 : currentIndex+1) * (scene.data.width * scene.scale);\n      // scrollTo = (scrollTo <= minScrollTo) ? \'0\' : scrollTo;\n      // scrollTo = (scrollTo > maxScrollTo) ? maxScrollTo : scrollTo;\n      //---\n      // step = custom stops\n\n      var stops = this.options.stops;\n      if (!stops) console.error(Panorama_LOG, \'missing options "stops"\');\n      stops = stops.map(function (x) {\n        return Math.round(x * scene.scale);\n      });\n      stops.sort(function (a, b) {\n        return a - b;\n      });\n      Panorama_DEBUG && console.log(Panorama_LOG, \'stops\', stops);\n      var currentScrollCenter = Math.round(scene.element.scrollLeft + scene.element.clientWidth / 2 - (scene.element.clientWidth - scene.content.clientWidth * scene.scale) / 2); // DEBUG && console.log(LOG, \'currentScrollCenter\', currentScrollCenter);\n\n      var scrollTo;\n      var stop = 0;\n\n      if (dir == \'left\') {\n        // Find next smaller stop (relative to current scroll center)\n        var stopsReverse = stops.slice(0).reverse();\n\n        for (var i = 0; i < stopsReverse.length; i++) {\n          var item = stopsReverse[i];\n\n          if (item < currentScrollCenter) {\n            stop = item;\n            break;\n          }\n        }\n      } else {\n        // Find next higher stop (relative to current scroll center)\n        for (var i = 0; i < stops.length; i++) {\n          var item = stops[i];\n\n          if (item > currentScrollCenter + 1) {\n            stop = item;\n            break;\n          }\n        }\n      } // Calculate scroll new position\n\n\n      scrollTo = Math.floor(stop - scene.element.clientWidth / 2 + (scene.element.clientWidth - scene.content.clientWidth * scene.scale) / 2);\n      scrollTo = scrollTo <= minScrollTo ? \'0\' : scrollTo;\n      scrollTo = scrollTo > maxScrollTo ? maxScrollTo : scrollTo; // DEBUG && console.log(LOG, \'scrollTo\', scrollTo);\n      // Duration relative to distance\n\n      var duration = Math.abs(this.lastScrollTo - scrollTo) / 1200 / this.options.speed;\n      duration = duration < .2 ? .2 : duration; // DEBUG && console.log(LOG, \'speed\', this.options.speed);\n      // DEBUG && console.log(LOG, \'duration\', duration);\n      // Remember\n\n      this.lastScrollTo = scrollTo; // Tween    \n\n      gsap.isTweening(scene.element) && gsap.killTweensOf(scene.element);\n      gsap.to(scene.element, {\n        duration: duration,\n        ease: \'power4.inOut\',\n        scrollLeft: scrollTo,\n        onComplete: function onComplete() {\n          // updateCursorDir();\n          // Propagate custom_slide_active\n          scene.emit(\'custom_slide_active\', {\n            index: stops.indexOf(stop),\n            scrollTo: scrollTo\n          });\n        }\n      });\n    }\n  }]);\n\n  return _default;\n}(PluginBase_default);\n\n\n// EXTERNAL MODULE: ./style/fusion.scss\nvar fusion = __webpack_require__(3);\n\n// CONCATENATED MODULE: ./src/mojo.js\n\n\n // import {FusionHelper} from \'./mojo/core/FusionHelper\';\n\n\n // Effects\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar version = __webpack_require__(7).version;\n\nconsole.log(\'[ Mojo ]\', \'VERSION\', version); // Gsap Defaults\n\ngsap.defaults({\n  ease: "power2.inOut",\n  duration: 0.5\n});\ngsap.config({\n  force3D: true\n}); // Global Mojo instance\n\nwindow.mojo = new Mojo_default(); // Use Mojo instance as namespace for all classes\n\nObject.assign(window.mojo, {\n  // FusionHelper, // MOVED TO FUSION\n  // #TODO: Decide between FusionHelper.throttle and helper.throttle (lodash)\n  helper: {\n    throttle: lodash_throttle_default.a,\n    debounce: lodash_debounce_default.a\n  },\n  plugins: {\n    Panorama: Panorama_default,\n    VisualDebugger: VisualDebugger_default\n  },\n  fx: {\n    FxBase: FxBase["a" /* default */],\n    Debugger: Debugger_default,\n    FxScanner: FxScanner["a" /* default */],\n    Glitch: Glitch_default,\n    Magnet: Magnet_default,\n    Hide: Hide_default,\n    Particles: Particles_default,\n    HandCursor: HandCursor_default,\n    Jump: Jump_default,\n    GlitchAppear: GlitchAppear_default,\n    GlitchInOut: GlitchInOut_default,\n    GlitchCanvas: GlitchCanvas_default,\n    GlitchEasel: GlitchEasel_default,\n    TypeAnimation: TypeAnimation_default,\n    Spritesheet: Spritesheet_default,\n    Remove: Remove_default,\n    Fade: Fade_default,\n    PanZoom: PanZoom_default,\n    ex: {\n      anime: {\n        Magnet: anime_Magnet_default\n      }\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///12\n')}]);